// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "activity_module.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ActivityInfo
 */
export interface ActivityInfo {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional uint64 startTime = 2;
     */
    startTime?: bigint;
    /**
     * @generated from protobuf field: optional uint64 endTime = 3;
     */
    endTime?: bigint;
    /**
     * @generated from protobuf field: optional bool online = 4;
     */
    online?: boolean;
    /**
     * @generated from protobuf field: optional bool isNewStage = 5;
     */
    isNewStage?: boolean;
    /**
     * @generated from protobuf field: optional int32 currentStage = 6;
     */
    currentStage?: number;
}
/**
 * @generated from protobuf message ActivityNewStageReadRequest
 */
export interface ActivityNewStageReadRequest {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
}
/**
 * @generated from protobuf message ActivityNewStageReadReply
 */
export interface ActivityNewStageReadReply {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
}
/**
 * @generated from protobuf message GetActivityInfosRequest
 */
export interface GetActivityInfosRequest {
}
/**
 * @generated from protobuf message EndActivityPush
 */
export interface EndActivityPush {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
}
/**
 * @generated from protobuf message GetActivityInfosReply
 */
export interface GetActivityInfosReply {
    /**
     * @generated from protobuf field: ActivityInfo activityInfos = 1;
     */
    activityInfos?: ActivityInfo;
}
/**
 * @generated from protobuf message UpdateActivityPush
 */
export interface UpdateActivityPush {
    /**
     * @generated from protobuf field: optional ActivityInfo activityInfo = 1;
     */
    activityInfo?: ActivityInfo;
    /**
     * @generated from protobuf field: optional int32 time = 2;
     */
    time?: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class ActivityInfo$Type extends MessageType<ActivityInfo> {
    constructor() {
        super("ActivityInfo", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "startTime", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "endTime", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "online", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "isNewStage", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "currentStage", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityInfo>): ActivityInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityInfo): ActivityInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* optional uint64 startTime */ 2:
                    message.startTime = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 endTime */ 3:
                    message.endTime = reader.uint64().toBigInt();
                    break;
                case /* optional bool online */ 4:
                    message.online = reader.bool();
                    break;
                case /* optional bool isNewStage */ 5:
                    message.isNewStage = reader.bool();
                    break;
                case /* optional int32 currentStage */ 6:
                    message.currentStage = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* optional uint64 startTime = 2; */
        if (message.startTime !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.startTime);
        /* optional uint64 endTime = 3; */
        if (message.endTime !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.endTime);
        /* optional bool online = 4; */
        if (message.online !== undefined)
            writer.tag(4, WireType.Varint).bool(message.online);
        /* optional bool isNewStage = 5; */
        if (message.isNewStage !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isNewStage);
        /* optional int32 currentStage = 6; */
        if (message.currentStage !== undefined)
            writer.tag(6, WireType.Varint).int32(message.currentStage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ActivityInfo
 */
export const ActivityInfo = new ActivityInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityNewStageReadRequest$Type extends MessageType<ActivityNewStageReadRequest> {
    constructor() {
        super("ActivityNewStageReadRequest", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityNewStageReadRequest>): ActivityNewStageReadRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityNewStageReadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityNewStageReadRequest): ActivityNewStageReadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityNewStageReadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ActivityNewStageReadRequest
 */
export const ActivityNewStageReadRequest = new ActivityNewStageReadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityNewStageReadReply$Type extends MessageType<ActivityNewStageReadReply> {
    constructor() {
        super("ActivityNewStageReadReply", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityNewStageReadReply>): ActivityNewStageReadReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityNewStageReadReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityNewStageReadReply): ActivityNewStageReadReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityNewStageReadReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ActivityNewStageReadReply
 */
export const ActivityNewStageReadReply = new ActivityNewStageReadReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActivityInfosRequest$Type extends MessageType<GetActivityInfosRequest> {
    constructor() {
        super("GetActivityInfosRequest", []);
    }
    create(value?: PartialMessage<GetActivityInfosRequest>): GetActivityInfosRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetActivityInfosRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetActivityInfosRequest): GetActivityInfosRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetActivityInfosRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetActivityInfosRequest
 */
export const GetActivityInfosRequest = new GetActivityInfosRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EndActivityPush$Type extends MessageType<EndActivityPush> {
    constructor() {
        super("EndActivityPush", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EndActivityPush>): EndActivityPush {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EndActivityPush>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EndActivityPush): EndActivityPush {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EndActivityPush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EndActivityPush
 */
export const EndActivityPush = new EndActivityPush$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActivityInfosReply$Type extends MessageType<GetActivityInfosReply> {
    constructor() {
        super("GetActivityInfosReply", [
            { no: 1, name: "activityInfos", kind: "message", T: () => ActivityInfo }
        ]);
    }
    create(value?: PartialMessage<GetActivityInfosReply>): GetActivityInfosReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetActivityInfosReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetActivityInfosReply): GetActivityInfosReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ActivityInfo activityInfos */ 1:
                    message.activityInfos = ActivityInfo.internalBinaryRead(reader, reader.uint32(), options, message.activityInfos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetActivityInfosReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ActivityInfo activityInfos = 1; */
        if (message.activityInfos)
            ActivityInfo.internalBinaryWrite(message.activityInfos, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetActivityInfosReply
 */
export const GetActivityInfosReply = new GetActivityInfosReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateActivityPush$Type extends MessageType<UpdateActivityPush> {
    constructor() {
        super("UpdateActivityPush", [
            { no: 1, name: "activityInfo", kind: "message", T: () => ActivityInfo },
            { no: 2, name: "time", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateActivityPush>): UpdateActivityPush {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateActivityPush>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateActivityPush): UpdateActivityPush {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional ActivityInfo activityInfo */ 1:
                    message.activityInfo = ActivityInfo.internalBinaryRead(reader, reader.uint32(), options, message.activityInfo);
                    break;
                case /* optional int32 time */ 2:
                    message.time = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateActivityPush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional ActivityInfo activityInfo = 1; */
        if (message.activityInfo)
            ActivityInfo.internalBinaryWrite(message.activityInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 time = 2; */
        if (message.time !== undefined)
            writer.tag(2, WireType.Varint).int32(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateActivityPush
 */
export const UpdateActivityPush = new UpdateActivityPush$Type();
