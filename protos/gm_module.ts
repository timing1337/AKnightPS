// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "gm_module.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message GpuCpuLogRequest
 */
export interface GpuCpuLogRequest {
    /**
     * @generated from protobuf field: optional string gpu = 1;
     */
    gpu?: string;
    /**
     * @generated from protobuf field: optional string cpu = 2;
     */
    cpu?: string;
}
/**
 * @generated from protobuf message GMRequest
 */
export interface GMRequest {
    /**
     * @generated from protobuf field: string commandText = 1;
     */
    commandText: string;
}
/**
 * @generated from protobuf message GMReply
 */
export interface GMReply {
    /**
     * @generated from protobuf field: optional GMReply.ResultEnum result = 1;
     */
    result?: GMReply_ResultEnum;
}
/**
 * @generated from protobuf enum GMReply.ResultEnum
 */
export enum GMReply_ResultEnum {
    /**
     * @generated from protobuf enum value: RESULTENUMOK = 0;
     */
    RESULTENUMOK = 0,
    /**
     * @generated from protobuf enum value: RESULTENUMFAILED = 1;
     */
    RESULTENUMFAILED = 1,
    /**
     * @generated from protobuf enum value: RESULTENUMUNKNOWN_CMD = 2;
     */
    RESULTENUMUNKNOWN_CMD = 2
}
/**
 * @generated from protobuf message GpuCpuLogReply
 */
export interface GpuCpuLogReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class GpuCpuLogRequest$Type extends MessageType<GpuCpuLogRequest> {
    constructor() {
        super("GpuCpuLogRequest", [
            { no: 1, name: "gpu", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cpu", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GpuCpuLogRequest>): GpuCpuLogRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GpuCpuLogRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GpuCpuLogRequest): GpuCpuLogRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string gpu */ 1:
                    message.gpu = reader.string();
                    break;
                case /* optional string cpu */ 2:
                    message.cpu = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GpuCpuLogRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string gpu = 1; */
        if (message.gpu !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.gpu);
        /* optional string cpu = 2; */
        if (message.cpu !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.cpu);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GpuCpuLogRequest
 */
export const GpuCpuLogRequest = new GpuCpuLogRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GMRequest$Type extends MessageType<GMRequest> {
    constructor() {
        super("GMRequest", [
            { no: 1, name: "commandText", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GMRequest>): GMRequest {
        const message = { commandText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GMRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GMRequest): GMRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string commandText */ 1:
                    message.commandText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GMRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string commandText = 1; */
        if (message.commandText !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.commandText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GMRequest
 */
export const GMRequest = new GMRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GMReply$Type extends MessageType<GMReply> {
    constructor() {
        super("GMReply", [
            { no: 1, name: "result", kind: "enum", opt: true, T: () => ["GMReply.ResultEnum", GMReply_ResultEnum] }
        ]);
    }
    create(value?: PartialMessage<GMReply>): GMReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GMReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GMReply): GMReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional GMReply.ResultEnum result */ 1:
                    message.result = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GMReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional GMReply.ResultEnum result = 1; */
        if (message.result !== undefined)
            writer.tag(1, WireType.Varint).int32(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GMReply
 */
export const GMReply = new GMReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GpuCpuLogReply$Type extends MessageType<GpuCpuLogReply> {
    constructor() {
        super("GpuCpuLogReply", []);
    }
    create(value?: PartialMessage<GpuCpuLogReply>): GpuCpuLogReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GpuCpuLogReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GpuCpuLogReply): GpuCpuLogReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GpuCpuLogReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GpuCpuLogReply
 */
export const GpuCpuLogReply = new GpuCpuLogReply$Type();
