// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "stats_module.proto" (syntax proto2)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PlayerInfo } from "./player_def";
/**
 * @generated from protobuf message ClientStatBaseInfoReply
 */
export interface ClientStatBaseInfoReply {
}
/**
 * @generated from protobuf message UpdateClientStatBaseInfoReply
 */
export interface UpdateClientStatBaseInfoReply {
    /**
     * @generated from protobuf field: optional int32 accountBindBonus = 1;
     */
    accountBindBonus?: number;
}
/**
 * @generated from protobuf message UpdateClientStatBaseInfoRequest
 */
export interface UpdateClientStatBaseInfoRequest {
    /**
     * @generated from protobuf field: optional string info = 1;
     */
    info?: string;
}
/**
 * @generated from protobuf message ClientStatBaseInfoRequest
 */
export interface ClientStatBaseInfoRequest {
    /**
     * @generated from protobuf field: optional string info = 1;
     */
    info?: string;
}
/**
 * @generated from protobuf message StatInfoPush
 */
export interface StatInfoPush {
    /**
     * @generated from protobuf field: optional bool fristCharge = 1;
     */
    fristCharge?: boolean;
    /**
     * @generated from protobuf field: optional int32 totalChargeAmount = 2;
     */
    totalChargeAmount?: number;
    /**
     * @generated from protobuf field: optional bool isFirstLogin = 3;
     */
    isFirstLogin?: boolean;
    /**
     * @generated from protobuf field: optional PlayerInfo playerInfo = 4;
     */
    playerInfo?: PlayerInfo;
}
// @generated message type with reflection information, may provide speed optimized methods
class ClientStatBaseInfoReply$Type extends MessageType<ClientStatBaseInfoReply> {
    constructor() {
        super("ClientStatBaseInfoReply", []);
    }
    create(value?: PartialMessage<ClientStatBaseInfoReply>): ClientStatBaseInfoReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientStatBaseInfoReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientStatBaseInfoReply): ClientStatBaseInfoReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ClientStatBaseInfoReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ClientStatBaseInfoReply
 */
export const ClientStatBaseInfoReply = new ClientStatBaseInfoReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateClientStatBaseInfoReply$Type extends MessageType<UpdateClientStatBaseInfoReply> {
    constructor() {
        super("UpdateClientStatBaseInfoReply", [
            { no: 1, name: "accountBindBonus", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateClientStatBaseInfoReply>): UpdateClientStatBaseInfoReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateClientStatBaseInfoReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateClientStatBaseInfoReply): UpdateClientStatBaseInfoReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 accountBindBonus */ 1:
                    message.accountBindBonus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateClientStatBaseInfoReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 accountBindBonus = 1; */
        if (message.accountBindBonus !== undefined)
            writer.tag(1, WireType.Varint).int32(message.accountBindBonus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateClientStatBaseInfoReply
 */
export const UpdateClientStatBaseInfoReply = new UpdateClientStatBaseInfoReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateClientStatBaseInfoRequest$Type extends MessageType<UpdateClientStatBaseInfoRequest> {
    constructor() {
        super("UpdateClientStatBaseInfoRequest", [
            { no: 1, name: "info", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateClientStatBaseInfoRequest>): UpdateClientStatBaseInfoRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateClientStatBaseInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateClientStatBaseInfoRequest): UpdateClientStatBaseInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string info */ 1:
                    message.info = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateClientStatBaseInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string info = 1; */
        if (message.info !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.info);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateClientStatBaseInfoRequest
 */
export const UpdateClientStatBaseInfoRequest = new UpdateClientStatBaseInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientStatBaseInfoRequest$Type extends MessageType<ClientStatBaseInfoRequest> {
    constructor() {
        super("ClientStatBaseInfoRequest", [
            { no: 1, name: "info", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClientStatBaseInfoRequest>): ClientStatBaseInfoRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientStatBaseInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientStatBaseInfoRequest): ClientStatBaseInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string info */ 1:
                    message.info = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientStatBaseInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string info = 1; */
        if (message.info !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.info);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ClientStatBaseInfoRequest
 */
export const ClientStatBaseInfoRequest = new ClientStatBaseInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatInfoPush$Type extends MessageType<StatInfoPush> {
    constructor() {
        super("StatInfoPush", [
            { no: 1, name: "fristCharge", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "totalChargeAmount", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "isFirstLogin", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "playerInfo", kind: "message", T: () => PlayerInfo }
        ]);
    }
    create(value?: PartialMessage<StatInfoPush>): StatInfoPush {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StatInfoPush>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatInfoPush): StatInfoPush {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool fristCharge */ 1:
                    message.fristCharge = reader.bool();
                    break;
                case /* optional int32 totalChargeAmount */ 2:
                    message.totalChargeAmount = reader.int32();
                    break;
                case /* optional bool isFirstLogin */ 3:
                    message.isFirstLogin = reader.bool();
                    break;
                case /* optional PlayerInfo playerInfo */ 4:
                    message.playerInfo = PlayerInfo.internalBinaryRead(reader, reader.uint32(), options, message.playerInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StatInfoPush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool fristCharge = 1; */
        if (message.fristCharge !== undefined)
            writer.tag(1, WireType.Varint).bool(message.fristCharge);
        /* optional int32 totalChargeAmount = 2; */
        if (message.totalChargeAmount !== undefined)
            writer.tag(2, WireType.Varint).int32(message.totalChargeAmount);
        /* optional bool isFirstLogin = 3; */
        if (message.isFirstLogin !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isFirstLogin);
        /* optional PlayerInfo playerInfo = 4; */
        if (message.playerInfo)
            PlayerInfo.internalBinaryWrite(message.playerInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StatInfoPush
 */
export const StatInfoPush = new StatInfoPush$Type();
