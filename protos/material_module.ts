// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "material_module.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message MaterialChangePush
 */
export interface MaterialChangePush {
    /**
     * @generated from protobuf field: repeated MaterialData dataList = 1;
     */
    dataList: MaterialData[];
    /**
     * @generated from protobuf field: optional uint32 getApproach = 2;
     */
    getApproach?: number;
}
/**
 * @generated from protobuf message MaterialData
 */
export interface MaterialData {
    /**
     * @generated from protobuf field: optional uint32 materilType = 1;
     */
    materilType?: number;
    /**
     * @generated from protobuf field: optional uint32 materilId = 2;
     */
    materilId?: number;
    /**
     * @generated from protobuf field: optional int32 quantity = 3;
     */
    quantity?: number;
}
/**
 * @generated from protobuf message M2QEntry
 */
export interface M2QEntry {
    /**
     * @generated from protobuf field: optional uint32 materialId = 1;
     */
    materialId?: number;
    /**
     * @generated from protobuf field: optional int32 quantity = 2;
     */
    quantity?: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class MaterialChangePush$Type extends MessageType<MaterialChangePush> {
    constructor() {
        super("MaterialChangePush", [
            { no: 1, name: "dataList", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MaterialData },
            { no: 2, name: "getApproach", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MaterialChangePush>): MaterialChangePush {
        const message = { dataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MaterialChangePush>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaterialChangePush): MaterialChangePush {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated MaterialData dataList */ 1:
                    message.dataList.push(MaterialData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 getApproach */ 2:
                    message.getApproach = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MaterialChangePush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated MaterialData dataList = 1; */
        for (let i = 0; i < message.dataList.length; i++)
            MaterialData.internalBinaryWrite(message.dataList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 getApproach = 2; */
        if (message.getApproach !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.getApproach);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MaterialChangePush
 */
export const MaterialChangePush = new MaterialChangePush$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaterialData$Type extends MessageType<MaterialData> {
    constructor() {
        super("MaterialData", [
            { no: 1, name: "materilType", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "materilId", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "quantity", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MaterialData>): MaterialData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MaterialData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaterialData): MaterialData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 materilType */ 1:
                    message.materilType = reader.uint32();
                    break;
                case /* optional uint32 materilId */ 2:
                    message.materilId = reader.uint32();
                    break;
                case /* optional int32 quantity */ 3:
                    message.quantity = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MaterialData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 materilType = 1; */
        if (message.materilType !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.materilType);
        /* optional uint32 materilId = 2; */
        if (message.materilId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.materilId);
        /* optional int32 quantity = 3; */
        if (message.quantity !== undefined)
            writer.tag(3, WireType.Varint).int32(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MaterialData
 */
export const MaterialData = new MaterialData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class M2QEntry$Type extends MessageType<M2QEntry> {
    constructor() {
        super("M2QEntry", [
            { no: 1, name: "materialId", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "quantity", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<M2QEntry>): M2QEntry {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<M2QEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: M2QEntry): M2QEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 materialId */ 1:
                    message.materialId = reader.uint32();
                    break;
                case /* optional int32 quantity */ 2:
                    message.quantity = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: M2QEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 materialId = 1; */
        if (message.materialId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.materialId);
        /* optional int32 quantity = 2; */
        if (message.quantity !== undefined)
            writer.tag(2, WireType.Varint).int32(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message M2QEntry
 */
export const M2QEntry = new M2QEntry$Type();
