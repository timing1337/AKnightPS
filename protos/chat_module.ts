// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "chat_module.proto" (syntax proto2)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message GetReportTypeRequest
 */
export interface GetReportTypeRequest {
}
/**
 * @generated from protobuf message DeleteOfflineMsgReply
 */
export interface DeleteOfflineMsgReply {
}
/**
 * @generated from protobuf message ChatMsgPush
 */
export interface ChatMsgPush {
    /**
     * @generated from protobuf field: ChatMsg msg = 1;
     */
    msg?: ChatMsg;
}
/**
 * @generated from protobuf message ReportRequest
 */
export interface ReportRequest {
    /**
     * @generated from protobuf field: optional uint64 reportedUserId = 1;
     */
    reportedUserId?: bigint;
    /**
     * @generated from protobuf field: optional int32 reportTypeId = 2;
     */
    reportTypeId?: number;
    /**
     * @generated from protobuf field: optional string content = 3;
     */
    content?: string;
}
/**
 * @generated from protobuf message GetReportTypeReply
 */
export interface GetReportTypeReply {
    /**
     * @generated from protobuf field: ReportType reportTypes = 1;
     */
    reportTypes?: ReportType;
}
/**
 * @generated from protobuf message SendMsgReply
 */
export interface SendMsgReply {
    /**
     * @generated from protobuf field: optional string message = 1;
     */
    message?: string;
    /**
     * @generated from protobuf field: optional string content = 2;
     */
    content?: string;
    /**
     * @generated from protobuf field: optional uint32 channelType = 3;
     */
    channelType?: number;
}
/**
 * @generated from protobuf message DeleteOfflineMsgRequest
 */
export interface DeleteOfflineMsgRequest {
}
/**
 * @generated from protobuf message SendMsgRequest
 */
export interface SendMsgRequest {
    /**
     * @generated from protobuf field: optional uint32 channelType = 1;
     */
    channelType?: number;
    /**
     * @generated from protobuf field: optional uint64 recipientId = 2;
     */
    recipientId?: bigint;
    /**
     * @generated from protobuf field: optional string content = 3;
     */
    content?: string;
}
/**
 * @generated from protobuf message ReportType
 */
export interface ReportType {
    /**
     * @generated from protobuf field: optional int32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional string desc = 2;
     */
    desc?: string;
}
/**
 * @generated from protobuf message ChatMsg
 */
export interface ChatMsg {
    /**
     * @generated from protobuf field: optional uint64 msgId = 1;
     */
    msgId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 channelType = 2;
     */
    channelType?: number;
    /**
     * @generated from protobuf field: optional uint64 senderId = 3;
     */
    senderId?: bigint;
    /**
     * @generated from protobuf field: optional string senderName = 4;
     */
    senderName?: string;
    /**
     * @generated from protobuf field: optional uint32 portrait = 5;
     */
    portrait?: number;
    /**
     * @generated from protobuf field: optional string content = 6;
     */
    content?: string;
    /**
     * @generated from protobuf field: optional uint64 sendTime = 7;
     */
    sendTime?: bigint;
    /**
     * @generated from protobuf field: optional uint32 level = 8;
     */
    level?: number;
    /**
     * @generated from protobuf field: optional uint64 recipientId = 9;
     */
    recipientId?: bigint;
}
/**
 * @generated from protobuf message ReportReply
 */
export interface ReportReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class GetReportTypeRequest$Type extends MessageType<GetReportTypeRequest> {
    constructor() {
        super("GetReportTypeRequest", []);
    }
    create(value?: PartialMessage<GetReportTypeRequest>): GetReportTypeRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetReportTypeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetReportTypeRequest): GetReportTypeRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetReportTypeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetReportTypeRequest
 */
export const GetReportTypeRequest = new GetReportTypeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteOfflineMsgReply$Type extends MessageType<DeleteOfflineMsgReply> {
    constructor() {
        super("DeleteOfflineMsgReply", []);
    }
    create(value?: PartialMessage<DeleteOfflineMsgReply>): DeleteOfflineMsgReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteOfflineMsgReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteOfflineMsgReply): DeleteOfflineMsgReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteOfflineMsgReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteOfflineMsgReply
 */
export const DeleteOfflineMsgReply = new DeleteOfflineMsgReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatMsgPush$Type extends MessageType<ChatMsgPush> {
    constructor() {
        super("ChatMsgPush", [
            { no: 1, name: "msg", kind: "message", T: () => ChatMsg }
        ]);
    }
    create(value?: PartialMessage<ChatMsgPush>): ChatMsgPush {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatMsgPush>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatMsgPush): ChatMsgPush {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ChatMsg msg */ 1:
                    message.msg = ChatMsg.internalBinaryRead(reader, reader.uint32(), options, message.msg);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatMsgPush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ChatMsg msg = 1; */
        if (message.msg)
            ChatMsg.internalBinaryWrite(message.msg, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatMsgPush
 */
export const ChatMsgPush = new ChatMsgPush$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportRequest$Type extends MessageType<ReportRequest> {
    constructor() {
        super("ReportRequest", [
            { no: 1, name: "reportedUserId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "reportTypeId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "content", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReportRequest>): ReportRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportRequest): ReportRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 reportedUserId */ 1:
                    message.reportedUserId = reader.uint64().toBigInt();
                    break;
                case /* optional int32 reportTypeId */ 2:
                    message.reportTypeId = reader.int32();
                    break;
                case /* optional string content */ 3:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReportRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 reportedUserId = 1; */
        if (message.reportedUserId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.reportedUserId);
        /* optional int32 reportTypeId = 2; */
        if (message.reportTypeId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.reportTypeId);
        /* optional string content = 3; */
        if (message.content !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ReportRequest
 */
export const ReportRequest = new ReportRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetReportTypeReply$Type extends MessageType<GetReportTypeReply> {
    constructor() {
        super("GetReportTypeReply", [
            { no: 1, name: "reportTypes", kind: "message", T: () => ReportType }
        ]);
    }
    create(value?: PartialMessage<GetReportTypeReply>): GetReportTypeReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetReportTypeReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetReportTypeReply): GetReportTypeReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ReportType reportTypes */ 1:
                    message.reportTypes = ReportType.internalBinaryRead(reader, reader.uint32(), options, message.reportTypes);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetReportTypeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ReportType reportTypes = 1; */
        if (message.reportTypes)
            ReportType.internalBinaryWrite(message.reportTypes, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetReportTypeReply
 */
export const GetReportTypeReply = new GetReportTypeReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMsgReply$Type extends MessageType<SendMsgReply> {
    constructor() {
        super("SendMsgReply", [
            { no: 1, name: "message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "channelType", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SendMsgReply>): SendMsgReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendMsgReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendMsgReply): SendMsgReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string message */ 1:
                    message.message = reader.string();
                    break;
                case /* optional string content */ 2:
                    message.content = reader.string();
                    break;
                case /* optional uint32 channelType */ 3:
                    message.channelType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendMsgReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string message = 1; */
        if (message.message !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        /* optional string content = 2; */
        if (message.content !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* optional uint32 channelType = 3; */
        if (message.channelType !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.channelType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SendMsgReply
 */
export const SendMsgReply = new SendMsgReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteOfflineMsgRequest$Type extends MessageType<DeleteOfflineMsgRequest> {
    constructor() {
        super("DeleteOfflineMsgRequest", []);
    }
    create(value?: PartialMessage<DeleteOfflineMsgRequest>): DeleteOfflineMsgRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteOfflineMsgRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteOfflineMsgRequest): DeleteOfflineMsgRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteOfflineMsgRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteOfflineMsgRequest
 */
export const DeleteOfflineMsgRequest = new DeleteOfflineMsgRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMsgRequest$Type extends MessageType<SendMsgRequest> {
    constructor() {
        super("SendMsgRequest", [
            { no: 1, name: "channelType", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "recipientId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "content", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SendMsgRequest>): SendMsgRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendMsgRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendMsgRequest): SendMsgRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 channelType */ 1:
                    message.channelType = reader.uint32();
                    break;
                case /* optional uint64 recipientId */ 2:
                    message.recipientId = reader.uint64().toBigInt();
                    break;
                case /* optional string content */ 3:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendMsgRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 channelType = 1; */
        if (message.channelType !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.channelType);
        /* optional uint64 recipientId = 2; */
        if (message.recipientId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.recipientId);
        /* optional string content = 3; */
        if (message.content !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SendMsgRequest
 */
export const SendMsgRequest = new SendMsgRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportType$Type extends MessageType<ReportType> {
    constructor() {
        super("ReportType", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "desc", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReportType>): ReportType {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportType): ReportType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* optional string desc */ 2:
                    message.desc = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReportType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* optional string desc = 2; */
        if (message.desc !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.desc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ReportType
 */
export const ReportType = new ReportType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatMsg$Type extends MessageType<ChatMsg> {
    constructor() {
        super("ChatMsg", [
            { no: 1, name: "msgId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "channelType", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "senderId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "senderName", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "portrait", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "content", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "sendTime", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "recipientId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ChatMsg>): ChatMsg {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatMsg): ChatMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 msgId */ 1:
                    message.msgId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 channelType */ 2:
                    message.channelType = reader.uint32();
                    break;
                case /* optional uint64 senderId */ 3:
                    message.senderId = reader.uint64().toBigInt();
                    break;
                case /* optional string senderName */ 4:
                    message.senderName = reader.string();
                    break;
                case /* optional uint32 portrait */ 5:
                    message.portrait = reader.uint32();
                    break;
                case /* optional string content */ 6:
                    message.content = reader.string();
                    break;
                case /* optional uint64 sendTime */ 7:
                    message.sendTime = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 level */ 8:
                    message.level = reader.uint32();
                    break;
                case /* optional uint64 recipientId */ 9:
                    message.recipientId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 msgId = 1; */
        if (message.msgId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.msgId);
        /* optional uint32 channelType = 2; */
        if (message.channelType !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.channelType);
        /* optional uint64 senderId = 3; */
        if (message.senderId !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.senderId);
        /* optional string senderName = 4; */
        if (message.senderName !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.senderName);
        /* optional uint32 portrait = 5; */
        if (message.portrait !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.portrait);
        /* optional string content = 6; */
        if (message.content !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.content);
        /* optional uint64 sendTime = 7; */
        if (message.sendTime !== undefined)
            writer.tag(7, WireType.Varint).uint64(message.sendTime);
        /* optional uint32 level = 8; */
        if (message.level !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.level);
        /* optional uint64 recipientId = 9; */
        if (message.recipientId !== undefined)
            writer.tag(9, WireType.Varint).uint64(message.recipientId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatMsg
 */
export const ChatMsg = new ChatMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportReply$Type extends MessageType<ReportReply> {
    constructor() {
        super("ReportReply", []);
    }
    create(value?: PartialMessage<ReportReply>): ReportReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportReply): ReportReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ReportReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ReportReply
 */
export const ReportReply = new ReportReply$Type();
