// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "bp_module.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Task } from "./task_module";
/**
 * @generated from protobuf message GetBpInfoReply
 */
export interface GetBpInfoReply {
    /**
     * @generated from protobuf field: optional int32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional int32 score = 2;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional int32 payStatus = 3;
     */
    payStatus?: number;
    /**
     * @generated from protobuf field: optional int32 startTime = 4;
     */
    startTime?: number;
    /**
     * @generated from protobuf field: optional int32 endTime = 5;
     */
    endTime?: number;
    /**
     * @generated from protobuf field: Task taskInfo = 6;
     */
    taskInfo?: Task;
    /**
     * @generated from protobuf field: BpScoreBonusInfo scoreBonusInfo = 7;
     */
    scoreBonusInfo?: BpScoreBonusInfo;
    /**
     * @generated from protobuf field: optional int32 weeklyScore = 8;
     */
    weeklyScore?: number;
    /**
     * @generated from protobuf field: optional bool firstShow = 9;
     */
    firstShow?: boolean;
}
/**
 * @generated from protobuf message BpScoreUpdatePush
 */
export interface BpScoreUpdatePush {
    /**
     * @generated from protobuf field: optional int32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional int32 score = 2;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional int32 weeklyScore = 3;
     */
    weeklyScore?: number;
}
/**
 * @generated from protobuf message BpScoreBonusInfo
 */
export interface BpScoreBonusInfo {
    /**
     * @generated from protobuf field: optional int32 level = 1;
     */
    level?: number;
    /**
     * @generated from protobuf field: optional bool hasGetfreeBonus = 2;
     */
    hasGetfreeBonus?: boolean;
    /**
     * @generated from protobuf field: optional bool hasGetPayBonus = 3;
     */
    hasGetPayBonus?: boolean;
}
/**
 * @generated from protobuf message GetBpBonusRequest
 */
export interface GetBpBonusRequest {
    /**
     * @generated from protobuf field: optional int32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional int32 level = 2;
     */
    level?: number;
    /**
     * @generated from protobuf field: optional bool payBonus = 3;
     */
    payBonus?: boolean;
}
/**
 * @generated from protobuf message BpPayPush
 */
export interface BpPayPush {
    /**
     * @generated from protobuf field: optional int32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional int32 payStatus = 2;
     */
    payStatus?: number;
}
/**
 * @generated from protobuf message GetBpInfoRequest
 */
export interface GetBpInfoRequest {
    /**
     * @generated from protobuf field: optional bool getTask = 1;
     */
    getTask?: boolean;
}
/**
 * @generated from protobuf message GetBpBonusReply
 */
export interface GetBpBonusReply {
    /**
     * @generated from protobuf field: optional int32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: BpScoreBonusInfo scoreBonusInfo = 2;
     */
    scoreBonusInfo?: BpScoreBonusInfo;
}
/**
 * @generated from protobuf message BpBuyLevelReply
 */
export interface BpBuyLevelReply {
    /**
     * @generated from protobuf field: optional int32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional int32 score = 2;
     */
    score?: number;
}
/**
 * @generated from protobuf message BpMarkFirstShowReply
 */
export interface BpMarkFirstShowReply {
    /**
     * @generated from protobuf field: optional int32 id = 1;
     */
    id?: number;
}
/**
 * @generated from protobuf message BpBuyLevelRequset
 */
export interface BpBuyLevelRequset {
    /**
     * @generated from protobuf field: optional int32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional int32 num = 2;
     */
    num?: number;
}
/**
 * @generated from protobuf message BpMarkFirstShowRequest
 */
export interface BpMarkFirstShowRequest {
    /**
     * @generated from protobuf field: optional int32 id = 1;
     */
    id?: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetBpInfoReply$Type extends MessageType<GetBpInfoReply> {
    constructor() {
        super("GetBpInfoReply", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "score", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "payStatus", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "startTime", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "endTime", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "taskInfo", kind: "message", T: () => Task },
            { no: 7, name: "scoreBonusInfo", kind: "message", T: () => BpScoreBonusInfo },
            { no: 8, name: "weeklyScore", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "firstShow", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetBpInfoReply>): GetBpInfoReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetBpInfoReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBpInfoReply): GetBpInfoReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* optional int32 score */ 2:
                    message.score = reader.int32();
                    break;
                case /* optional int32 payStatus */ 3:
                    message.payStatus = reader.int32();
                    break;
                case /* optional int32 startTime */ 4:
                    message.startTime = reader.int32();
                    break;
                case /* optional int32 endTime */ 5:
                    message.endTime = reader.int32();
                    break;
                case /* Task taskInfo */ 6:
                    message.taskInfo = Task.internalBinaryRead(reader, reader.uint32(), options, message.taskInfo);
                    break;
                case /* BpScoreBonusInfo scoreBonusInfo */ 7:
                    message.scoreBonusInfo = BpScoreBonusInfo.internalBinaryRead(reader, reader.uint32(), options, message.scoreBonusInfo);
                    break;
                case /* optional int32 weeklyScore */ 8:
                    message.weeklyScore = reader.int32();
                    break;
                case /* optional bool firstShow */ 9:
                    message.firstShow = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBpInfoReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* optional int32 score = 2; */
        if (message.score !== undefined)
            writer.tag(2, WireType.Varint).int32(message.score);
        /* optional int32 payStatus = 3; */
        if (message.payStatus !== undefined)
            writer.tag(3, WireType.Varint).int32(message.payStatus);
        /* optional int32 startTime = 4; */
        if (message.startTime !== undefined)
            writer.tag(4, WireType.Varint).int32(message.startTime);
        /* optional int32 endTime = 5; */
        if (message.endTime !== undefined)
            writer.tag(5, WireType.Varint).int32(message.endTime);
        /* Task taskInfo = 6; */
        if (message.taskInfo)
            Task.internalBinaryWrite(message.taskInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* BpScoreBonusInfo scoreBonusInfo = 7; */
        if (message.scoreBonusInfo)
            BpScoreBonusInfo.internalBinaryWrite(message.scoreBonusInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 weeklyScore = 8; */
        if (message.weeklyScore !== undefined)
            writer.tag(8, WireType.Varint).int32(message.weeklyScore);
        /* optional bool firstShow = 9; */
        if (message.firstShow !== undefined)
            writer.tag(9, WireType.Varint).bool(message.firstShow);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetBpInfoReply
 */
export const GetBpInfoReply = new GetBpInfoReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BpScoreUpdatePush$Type extends MessageType<BpScoreUpdatePush> {
    constructor() {
        super("BpScoreUpdatePush", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "score", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "weeklyScore", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BpScoreUpdatePush>): BpScoreUpdatePush {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BpScoreUpdatePush>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BpScoreUpdatePush): BpScoreUpdatePush {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* optional int32 score */ 2:
                    message.score = reader.int32();
                    break;
                case /* optional int32 weeklyScore */ 3:
                    message.weeklyScore = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BpScoreUpdatePush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* optional int32 score = 2; */
        if (message.score !== undefined)
            writer.tag(2, WireType.Varint).int32(message.score);
        /* optional int32 weeklyScore = 3; */
        if (message.weeklyScore !== undefined)
            writer.tag(3, WireType.Varint).int32(message.weeklyScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BpScoreUpdatePush
 */
export const BpScoreUpdatePush = new BpScoreUpdatePush$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BpScoreBonusInfo$Type extends MessageType<BpScoreBonusInfo> {
    constructor() {
        super("BpScoreBonusInfo", [
            { no: 1, name: "level", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "hasGetfreeBonus", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "hasGetPayBonus", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BpScoreBonusInfo>): BpScoreBonusInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BpScoreBonusInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BpScoreBonusInfo): BpScoreBonusInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 level */ 1:
                    message.level = reader.int32();
                    break;
                case /* optional bool hasGetfreeBonus */ 2:
                    message.hasGetfreeBonus = reader.bool();
                    break;
                case /* optional bool hasGetPayBonus */ 3:
                    message.hasGetPayBonus = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BpScoreBonusInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 level = 1; */
        if (message.level !== undefined)
            writer.tag(1, WireType.Varint).int32(message.level);
        /* optional bool hasGetfreeBonus = 2; */
        if (message.hasGetfreeBonus !== undefined)
            writer.tag(2, WireType.Varint).bool(message.hasGetfreeBonus);
        /* optional bool hasGetPayBonus = 3; */
        if (message.hasGetPayBonus !== undefined)
            writer.tag(3, WireType.Varint).bool(message.hasGetPayBonus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BpScoreBonusInfo
 */
export const BpScoreBonusInfo = new BpScoreBonusInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBpBonusRequest$Type extends MessageType<GetBpBonusRequest> {
    constructor() {
        super("GetBpBonusRequest", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "level", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "payBonus", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetBpBonusRequest>): GetBpBonusRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetBpBonusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBpBonusRequest): GetBpBonusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* optional int32 level */ 2:
                    message.level = reader.int32();
                    break;
                case /* optional bool payBonus */ 3:
                    message.payBonus = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBpBonusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* optional int32 level = 2; */
        if (message.level !== undefined)
            writer.tag(2, WireType.Varint).int32(message.level);
        /* optional bool payBonus = 3; */
        if (message.payBonus !== undefined)
            writer.tag(3, WireType.Varint).bool(message.payBonus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetBpBonusRequest
 */
export const GetBpBonusRequest = new GetBpBonusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BpPayPush$Type extends MessageType<BpPayPush> {
    constructor() {
        super("BpPayPush", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "payStatus", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BpPayPush>): BpPayPush {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BpPayPush>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BpPayPush): BpPayPush {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* optional int32 payStatus */ 2:
                    message.payStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BpPayPush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* optional int32 payStatus = 2; */
        if (message.payStatus !== undefined)
            writer.tag(2, WireType.Varint).int32(message.payStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BpPayPush
 */
export const BpPayPush = new BpPayPush$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBpInfoRequest$Type extends MessageType<GetBpInfoRequest> {
    constructor() {
        super("GetBpInfoRequest", [
            { no: 1, name: "getTask", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetBpInfoRequest>): GetBpInfoRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetBpInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBpInfoRequest): GetBpInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool getTask */ 1:
                    message.getTask = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBpInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool getTask = 1; */
        if (message.getTask !== undefined)
            writer.tag(1, WireType.Varint).bool(message.getTask);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetBpInfoRequest
 */
export const GetBpInfoRequest = new GetBpInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBpBonusReply$Type extends MessageType<GetBpBonusReply> {
    constructor() {
        super("GetBpBonusReply", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "scoreBonusInfo", kind: "message", T: () => BpScoreBonusInfo }
        ]);
    }
    create(value?: PartialMessage<GetBpBonusReply>): GetBpBonusReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetBpBonusReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBpBonusReply): GetBpBonusReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* BpScoreBonusInfo scoreBonusInfo */ 2:
                    message.scoreBonusInfo = BpScoreBonusInfo.internalBinaryRead(reader, reader.uint32(), options, message.scoreBonusInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBpBonusReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* BpScoreBonusInfo scoreBonusInfo = 2; */
        if (message.scoreBonusInfo)
            BpScoreBonusInfo.internalBinaryWrite(message.scoreBonusInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetBpBonusReply
 */
export const GetBpBonusReply = new GetBpBonusReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BpBuyLevelReply$Type extends MessageType<BpBuyLevelReply> {
    constructor() {
        super("BpBuyLevelReply", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "score", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BpBuyLevelReply>): BpBuyLevelReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BpBuyLevelReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BpBuyLevelReply): BpBuyLevelReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* optional int32 score */ 2:
                    message.score = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BpBuyLevelReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* optional int32 score = 2; */
        if (message.score !== undefined)
            writer.tag(2, WireType.Varint).int32(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BpBuyLevelReply
 */
export const BpBuyLevelReply = new BpBuyLevelReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BpMarkFirstShowReply$Type extends MessageType<BpMarkFirstShowReply> {
    constructor() {
        super("BpMarkFirstShowReply", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BpMarkFirstShowReply>): BpMarkFirstShowReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BpMarkFirstShowReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BpMarkFirstShowReply): BpMarkFirstShowReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BpMarkFirstShowReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BpMarkFirstShowReply
 */
export const BpMarkFirstShowReply = new BpMarkFirstShowReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BpBuyLevelRequset$Type extends MessageType<BpBuyLevelRequset> {
    constructor() {
        super("BpBuyLevelRequset", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "num", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BpBuyLevelRequset>): BpBuyLevelRequset {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BpBuyLevelRequset>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BpBuyLevelRequset): BpBuyLevelRequset {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* optional int32 num */ 2:
                    message.num = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BpBuyLevelRequset, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* optional int32 num = 2; */
        if (message.num !== undefined)
            writer.tag(2, WireType.Varint).int32(message.num);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BpBuyLevelRequset
 */
export const BpBuyLevelRequset = new BpBuyLevelRequset$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BpMarkFirstShowRequest$Type extends MessageType<BpMarkFirstShowRequest> {
    constructor() {
        super("BpMarkFirstShowRequest", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BpMarkFirstShowRequest>): BpMarkFirstShowRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BpMarkFirstShowRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BpMarkFirstShowRequest): BpMarkFirstShowRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BpMarkFirstShowRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BpMarkFirstShowRequest
 */
export const BpMarkFirstShowRequest = new BpMarkFirstShowRequest$Type();
