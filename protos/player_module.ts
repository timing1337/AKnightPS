// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "player_module.proto" (syntax proto2)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PlayerClothInfo } from "./player_def";
import { OpenInfo } from "./open_module";
import { PlayerInfo } from "./player_def";
/**
 * @generated from protobuf message SetBirthdayReply
 */
export interface SetBirthdayReply {
}
/**
 * @generated from protobuf message GetSimplePropertyReply
 */
export interface GetSimplePropertyReply {
    /**
     * @generated from protobuf field: repeated SimpleProperty simpleProperties = 1;
     */
    simpleProperties: SimpleProperty[];
}
/**
 * @generated from protobuf message GetPlayerInfoRequest
 */
export interface GetPlayerInfoRequest {
}
/**
 * @generated from protobuf message SetShowHeroUniqueIdsRequest
 */
export interface SetShowHeroUniqueIdsRequest {
    /**
     * @generated from protobuf field: repeated int64 showHeroUniqueIds = 1;
     */
    showHeroUniqueIds: bigint[];
}
/**
 * @generated from protobuf message MarkMainThumbnailRequest
 */
export interface MarkMainThumbnailRequest {
}
/**
 * @generated from protobuf message SetCharacterAgeRequest
 */
export interface SetCharacterAgeRequest {
    /**
     * @generated from protobuf field: repeated int32 characterAge = 1;
     */
    characterAge: number[];
}
/**
 * @generated from protobuf message SetSimplePropertyReply
 */
export interface SetSimplePropertyReply {
}
/**
 * @generated from protobuf message GetOtherPlayerInfoRequest
 */
export interface GetOtherPlayerInfoRequest {
    /**
     * @generated from protobuf field: optional int64 userId = 1;
     */
    userId?: bigint;
}
/**
 * @generated from protobuf message SimplePropertyPush
 */
export interface SimplePropertyPush {
    /**
     * @generated from protobuf field: optional SimpleProperty simpleProperty = 1;
     */
    simpleProperty?: SimpleProperty;
}
/**
 * @generated from protobuf message CreatePlayerReply
 */
export interface CreatePlayerReply {
    /**
     * @generated from protobuf field: optional PlayerInfo playerInfo = 1;
     */
    playerInfo?: PlayerInfo;
}
/**
 * @generated from protobuf message SetPortraitRequest
 */
export interface SetPortraitRequest {
    /**
     * @generated from protobuf field: optional int32 portrait = 1;
     */
    portrait?: number;
}
/**
 * @generated from protobuf message GetOtherPlayerInfoReply
 */
export interface GetOtherPlayerInfoReply {
    /**
     * @generated from protobuf field: optional PlayerInfo playerInfo = 1;
     */
    playerInfo?: PlayerInfo;
}
/**
 * @generated from protobuf message CreatePlayerRequest
 */
export interface CreatePlayerRequest {
    /**
     * @generated from protobuf field: optional string name = 1;
     */
    name?: string;
}
/**
 * @generated from protobuf message MarkMainThumbnailReply
 */
export interface MarkMainThumbnailReply {
}
/**
 * @generated from protobuf message SetCharacterAgeReply
 */
export interface SetCharacterAgeReply {
    /**
     * @generated from protobuf field: repeated int32 characterAge = 1;
     */
    characterAge: number[];
}
/**
 * @generated from protobuf message RenameReply
 */
export interface RenameReply {
    /**
     * @generated from protobuf field: optional bool canRename = 1;
     */
    canRename?: boolean;
    /**
     * @generated from protobuf field: optional int32 extRename = 2;
     */
    extRename?: number;
}
/**
 * @generated from protobuf message UseCdKeyReply
 */
export interface UseCdKeyReply {
}
/**
 * @generated from protobuf message PlayerInfoPush
 */
export interface PlayerInfoPush {
    /**
     * @generated from protobuf field: optional PlayerInfo playerInfo = 1;
     */
    playerInfo?: PlayerInfo;
}
/**
 * @generated from protobuf message UseCdKeyRequset
 */
export interface UseCdKeyRequset {
    /**
     * @generated from protobuf field: optional string giftCode = 1;
     */
    giftCode?: string;
}
/**
 * @generated from protobuf message GetClothInfoRequest
 */
export interface GetClothInfoRequest {
}
/**
 * @generated from protobuf message SetShowHeroUniqueIdsReply
 */
export interface SetShowHeroUniqueIdsReply {
}
/**
 * @generated from protobuf message SetSignatureRequest
 */
export interface SetSignatureRequest {
    /**
     * @generated from protobuf field: optional string signature = 1;
     */
    signature?: string;
}
/**
 * @generated from protobuf message SetSignatureReply
 */
export interface SetSignatureReply {
}
/**
 * @generated from protobuf message SetBirthdayRequest
 */
export interface SetBirthdayRequest {
    /**
     * @generated from protobuf field: optional string birthday = 1;
     */
    birthday?: string;
}
/**
 * @generated from protobuf message GetSimplePropertyRequest
 */
export interface GetSimplePropertyRequest {
}
/**
 * @generated from protobuf message ServerResultCodePush
 */
export interface ServerResultCodePush {
    /**
     * @generated from protobuf field: optional int32 resultCode = 1;
     */
    resultCode?: number;
}
/**
 * @generated from protobuf message RenameRequest
 */
export interface RenameRequest {
    /**
     * @generated from protobuf field: optional string name = 1;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional int32 guideId = 2;
     */
    guideId?: number;
    /**
     * @generated from protobuf field: optional int32 stepId = 3;
     */
    stepId?: number;
}
/**
 * @generated from protobuf message SetSimplePropertyRequest
 */
export interface SetSimplePropertyRequest {
    /**
     * @generated from protobuf field: optional int32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional string property = 2;
     */
    property?: string;
}
/**
 * @generated from protobuf message GetPlayerInfoReply
 */
export interface GetPlayerInfoReply {
    /**
     * @generated from protobuf field: optional PlayerInfo playerInfo = 1;
     */
    playerInfo?: PlayerInfo;
    /**
     * @generated from protobuf field: repeated OpenInfo openinfos = 2;
     */
    openinfos: OpenInfo[];
    /**
     * @generated from protobuf field: optional bool canRename = 3;
     */
    canRename?: boolean;
    /**
     * @generated from protobuf field: optional bool mainThumbnail = 4;
     */
    mainThumbnail?: boolean;
    /**
     * @generated from protobuf field: optional int32 extRename = 5;
     */
    extRename?: number;
}
/**
 * @generated from protobuf message GetClothInfoReply
 */
export interface GetClothInfoReply {
    /**
     * @generated from protobuf field: optional PlayerClothInfo clothInfos = 1;
     */
    clothInfos?: PlayerClothInfo;
}
/**
 * @generated from protobuf message SetPortraitReply
 */
export interface SetPortraitReply {
}
/**
 * @generated from protobuf message SimpleProperty
 */
export interface SimpleProperty {
    /**
     * @generated from protobuf field: optional int32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional string property = 2;
     */
    property?: string;
}
/**
 * @generated from protobuf message ClothUpdatePush
 */
export interface ClothUpdatePush {
    /**
     * @generated from protobuf field: optional PlayerClothInfo updateInfos = 1;
     */
    updateInfos?: PlayerClothInfo;
}
// @generated message type with reflection information, may provide speed optimized methods
class SetBirthdayReply$Type extends MessageType<SetBirthdayReply> {
    constructor() {
        super("SetBirthdayReply", []);
    }
    create(value?: PartialMessage<SetBirthdayReply>): SetBirthdayReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetBirthdayReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetBirthdayReply): SetBirthdayReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SetBirthdayReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetBirthdayReply
 */
export const SetBirthdayReply = new SetBirthdayReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSimplePropertyReply$Type extends MessageType<GetSimplePropertyReply> {
    constructor() {
        super("GetSimplePropertyReply", [
            { no: 1, name: "simpleProperties", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SimpleProperty }
        ]);
    }
    create(value?: PartialMessage<GetSimplePropertyReply>): GetSimplePropertyReply {
        const message = { simpleProperties: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSimplePropertyReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSimplePropertyReply): GetSimplePropertyReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated SimpleProperty simpleProperties */ 1:
                    message.simpleProperties.push(SimpleProperty.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSimplePropertyReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated SimpleProperty simpleProperties = 1; */
        for (let i = 0; i < message.simpleProperties.length; i++)
            SimpleProperty.internalBinaryWrite(message.simpleProperties[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetSimplePropertyReply
 */
export const GetSimplePropertyReply = new GetSimplePropertyReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPlayerInfoRequest$Type extends MessageType<GetPlayerInfoRequest> {
    constructor() {
        super("GetPlayerInfoRequest", []);
    }
    create(value?: PartialMessage<GetPlayerInfoRequest>): GetPlayerInfoRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPlayerInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPlayerInfoRequest): GetPlayerInfoRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetPlayerInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPlayerInfoRequest
 */
export const GetPlayerInfoRequest = new GetPlayerInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetShowHeroUniqueIdsRequest$Type extends MessageType<SetShowHeroUniqueIdsRequest> {
    constructor() {
        super("SetShowHeroUniqueIdsRequest", [
            { no: 1, name: "showHeroUniqueIds", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SetShowHeroUniqueIdsRequest>): SetShowHeroUniqueIdsRequest {
        const message = { showHeroUniqueIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetShowHeroUniqueIdsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetShowHeroUniqueIdsRequest): SetShowHeroUniqueIdsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 showHeroUniqueIds */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.showHeroUniqueIds.push(reader.int64().toBigInt());
                    else
                        message.showHeroUniqueIds.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetShowHeroUniqueIdsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 showHeroUniqueIds = 1; */
        for (let i = 0; i < message.showHeroUniqueIds.length; i++)
            writer.tag(1, WireType.Varint).int64(message.showHeroUniqueIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetShowHeroUniqueIdsRequest
 */
export const SetShowHeroUniqueIdsRequest = new SetShowHeroUniqueIdsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkMainThumbnailRequest$Type extends MessageType<MarkMainThumbnailRequest> {
    constructor() {
        super("MarkMainThumbnailRequest", []);
    }
    create(value?: PartialMessage<MarkMainThumbnailRequest>): MarkMainThumbnailRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MarkMainThumbnailRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkMainThumbnailRequest): MarkMainThumbnailRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MarkMainThumbnailRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MarkMainThumbnailRequest
 */
export const MarkMainThumbnailRequest = new MarkMainThumbnailRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetCharacterAgeRequest$Type extends MessageType<SetCharacterAgeRequest> {
    constructor() {
        super("SetCharacterAgeRequest", [
            { no: 1, name: "characterAge", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetCharacterAgeRequest>): SetCharacterAgeRequest {
        const message = { characterAge: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetCharacterAgeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetCharacterAgeRequest): SetCharacterAgeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 characterAge */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.characterAge.push(reader.int32());
                    else
                        message.characterAge.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetCharacterAgeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 characterAge = 1; */
        for (let i = 0; i < message.characterAge.length; i++)
            writer.tag(1, WireType.Varint).int32(message.characterAge[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetCharacterAgeRequest
 */
export const SetCharacterAgeRequest = new SetCharacterAgeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetSimplePropertyReply$Type extends MessageType<SetSimplePropertyReply> {
    constructor() {
        super("SetSimplePropertyReply", []);
    }
    create(value?: PartialMessage<SetSimplePropertyReply>): SetSimplePropertyReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetSimplePropertyReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetSimplePropertyReply): SetSimplePropertyReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SetSimplePropertyReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetSimplePropertyReply
 */
export const SetSimplePropertyReply = new SetSimplePropertyReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOtherPlayerInfoRequest$Type extends MessageType<GetOtherPlayerInfoRequest> {
    constructor() {
        super("GetOtherPlayerInfoRequest", [
            { no: 1, name: "userId", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetOtherPlayerInfoRequest>): GetOtherPlayerInfoRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOtherPlayerInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOtherPlayerInfoRequest): GetOtherPlayerInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int64 userId */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOtherPlayerInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int64 userId = 1; */
        if (message.userId !== undefined)
            writer.tag(1, WireType.Varint).int64(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetOtherPlayerInfoRequest
 */
export const GetOtherPlayerInfoRequest = new GetOtherPlayerInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SimplePropertyPush$Type extends MessageType<SimplePropertyPush> {
    constructor() {
        super("SimplePropertyPush", [
            { no: 1, name: "simpleProperty", kind: "message", T: () => SimpleProperty }
        ]);
    }
    create(value?: PartialMessage<SimplePropertyPush>): SimplePropertyPush {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SimplePropertyPush>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimplePropertyPush): SimplePropertyPush {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional SimpleProperty simpleProperty */ 1:
                    message.simpleProperty = SimpleProperty.internalBinaryRead(reader, reader.uint32(), options, message.simpleProperty);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimplePropertyPush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional SimpleProperty simpleProperty = 1; */
        if (message.simpleProperty)
            SimpleProperty.internalBinaryWrite(message.simpleProperty, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SimplePropertyPush
 */
export const SimplePropertyPush = new SimplePropertyPush$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePlayerReply$Type extends MessageType<CreatePlayerReply> {
    constructor() {
        super("CreatePlayerReply", [
            { no: 1, name: "playerInfo", kind: "message", T: () => PlayerInfo }
        ]);
    }
    create(value?: PartialMessage<CreatePlayerReply>): CreatePlayerReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreatePlayerReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePlayerReply): CreatePlayerReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional PlayerInfo playerInfo */ 1:
                    message.playerInfo = PlayerInfo.internalBinaryRead(reader, reader.uint32(), options, message.playerInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePlayerReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional PlayerInfo playerInfo = 1; */
        if (message.playerInfo)
            PlayerInfo.internalBinaryWrite(message.playerInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePlayerReply
 */
export const CreatePlayerReply = new CreatePlayerReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPortraitRequest$Type extends MessageType<SetPortraitRequest> {
    constructor() {
        super("SetPortraitRequest", [
            { no: 1, name: "portrait", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetPortraitRequest>): SetPortraitRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetPortraitRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPortraitRequest): SetPortraitRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 portrait */ 1:
                    message.portrait = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPortraitRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 portrait = 1; */
        if (message.portrait !== undefined)
            writer.tag(1, WireType.Varint).int32(message.portrait);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetPortraitRequest
 */
export const SetPortraitRequest = new SetPortraitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOtherPlayerInfoReply$Type extends MessageType<GetOtherPlayerInfoReply> {
    constructor() {
        super("GetOtherPlayerInfoReply", [
            { no: 1, name: "playerInfo", kind: "message", T: () => PlayerInfo }
        ]);
    }
    create(value?: PartialMessage<GetOtherPlayerInfoReply>): GetOtherPlayerInfoReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOtherPlayerInfoReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOtherPlayerInfoReply): GetOtherPlayerInfoReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional PlayerInfo playerInfo */ 1:
                    message.playerInfo = PlayerInfo.internalBinaryRead(reader, reader.uint32(), options, message.playerInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOtherPlayerInfoReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional PlayerInfo playerInfo = 1; */
        if (message.playerInfo)
            PlayerInfo.internalBinaryWrite(message.playerInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetOtherPlayerInfoReply
 */
export const GetOtherPlayerInfoReply = new GetOtherPlayerInfoReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePlayerRequest$Type extends MessageType<CreatePlayerRequest> {
    constructor() {
        super("CreatePlayerRequest", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreatePlayerRequest>): CreatePlayerRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreatePlayerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePlayerRequest): CreatePlayerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePlayerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePlayerRequest
 */
export const CreatePlayerRequest = new CreatePlayerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkMainThumbnailReply$Type extends MessageType<MarkMainThumbnailReply> {
    constructor() {
        super("MarkMainThumbnailReply", []);
    }
    create(value?: PartialMessage<MarkMainThumbnailReply>): MarkMainThumbnailReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MarkMainThumbnailReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkMainThumbnailReply): MarkMainThumbnailReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MarkMainThumbnailReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MarkMainThumbnailReply
 */
export const MarkMainThumbnailReply = new MarkMainThumbnailReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetCharacterAgeReply$Type extends MessageType<SetCharacterAgeReply> {
    constructor() {
        super("SetCharacterAgeReply", [
            { no: 1, name: "characterAge", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetCharacterAgeReply>): SetCharacterAgeReply {
        const message = { characterAge: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetCharacterAgeReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetCharacterAgeReply): SetCharacterAgeReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 characterAge */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.characterAge.push(reader.int32());
                    else
                        message.characterAge.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetCharacterAgeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 characterAge = 1; */
        for (let i = 0; i < message.characterAge.length; i++)
            writer.tag(1, WireType.Varint).int32(message.characterAge[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetCharacterAgeReply
 */
export const SetCharacterAgeReply = new SetCharacterAgeReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RenameReply$Type extends MessageType<RenameReply> {
    constructor() {
        super("RenameReply", [
            { no: 1, name: "canRename", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "extRename", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RenameReply>): RenameReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RenameReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RenameReply): RenameReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool canRename */ 1:
                    message.canRename = reader.bool();
                    break;
                case /* optional int32 extRename */ 2:
                    message.extRename = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RenameReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool canRename = 1; */
        if (message.canRename !== undefined)
            writer.tag(1, WireType.Varint).bool(message.canRename);
        /* optional int32 extRename = 2; */
        if (message.extRename !== undefined)
            writer.tag(2, WireType.Varint).int32(message.extRename);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RenameReply
 */
export const RenameReply = new RenameReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UseCdKeyReply$Type extends MessageType<UseCdKeyReply> {
    constructor() {
        super("UseCdKeyReply", []);
    }
    create(value?: PartialMessage<UseCdKeyReply>): UseCdKeyReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UseCdKeyReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UseCdKeyReply): UseCdKeyReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UseCdKeyReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UseCdKeyReply
 */
export const UseCdKeyReply = new UseCdKeyReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerInfoPush$Type extends MessageType<PlayerInfoPush> {
    constructor() {
        super("PlayerInfoPush", [
            { no: 1, name: "playerInfo", kind: "message", T: () => PlayerInfo }
        ]);
    }
    create(value?: PartialMessage<PlayerInfoPush>): PlayerInfoPush {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerInfoPush>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerInfoPush): PlayerInfoPush {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional PlayerInfo playerInfo */ 1:
                    message.playerInfo = PlayerInfo.internalBinaryRead(reader, reader.uint32(), options, message.playerInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerInfoPush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional PlayerInfo playerInfo = 1; */
        if (message.playerInfo)
            PlayerInfo.internalBinaryWrite(message.playerInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerInfoPush
 */
export const PlayerInfoPush = new PlayerInfoPush$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UseCdKeyRequset$Type extends MessageType<UseCdKeyRequset> {
    constructor() {
        super("UseCdKeyRequset", [
            { no: 1, name: "giftCode", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UseCdKeyRequset>): UseCdKeyRequset {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UseCdKeyRequset>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UseCdKeyRequset): UseCdKeyRequset {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string giftCode */ 1:
                    message.giftCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UseCdKeyRequset, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string giftCode = 1; */
        if (message.giftCode !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.giftCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UseCdKeyRequset
 */
export const UseCdKeyRequset = new UseCdKeyRequset$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetClothInfoRequest$Type extends MessageType<GetClothInfoRequest> {
    constructor() {
        super("GetClothInfoRequest", []);
    }
    create(value?: PartialMessage<GetClothInfoRequest>): GetClothInfoRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetClothInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetClothInfoRequest): GetClothInfoRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetClothInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetClothInfoRequest
 */
export const GetClothInfoRequest = new GetClothInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetShowHeroUniqueIdsReply$Type extends MessageType<SetShowHeroUniqueIdsReply> {
    constructor() {
        super("SetShowHeroUniqueIdsReply", []);
    }
    create(value?: PartialMessage<SetShowHeroUniqueIdsReply>): SetShowHeroUniqueIdsReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetShowHeroUniqueIdsReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetShowHeroUniqueIdsReply): SetShowHeroUniqueIdsReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SetShowHeroUniqueIdsReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetShowHeroUniqueIdsReply
 */
export const SetShowHeroUniqueIdsReply = new SetShowHeroUniqueIdsReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetSignatureRequest$Type extends MessageType<SetSignatureRequest> {
    constructor() {
        super("SetSignatureRequest", [
            { no: 1, name: "signature", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetSignatureRequest>): SetSignatureRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetSignatureRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetSignatureRequest): SetSignatureRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string signature */ 1:
                    message.signature = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetSignatureRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string signature = 1; */
        if (message.signature !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.signature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetSignatureRequest
 */
export const SetSignatureRequest = new SetSignatureRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetSignatureReply$Type extends MessageType<SetSignatureReply> {
    constructor() {
        super("SetSignatureReply", []);
    }
    create(value?: PartialMessage<SetSignatureReply>): SetSignatureReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetSignatureReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetSignatureReply): SetSignatureReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SetSignatureReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetSignatureReply
 */
export const SetSignatureReply = new SetSignatureReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetBirthdayRequest$Type extends MessageType<SetBirthdayRequest> {
    constructor() {
        super("SetBirthdayRequest", [
            { no: 1, name: "birthday", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetBirthdayRequest>): SetBirthdayRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetBirthdayRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetBirthdayRequest): SetBirthdayRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string birthday */ 1:
                    message.birthday = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetBirthdayRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string birthday = 1; */
        if (message.birthday !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.birthday);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetBirthdayRequest
 */
export const SetBirthdayRequest = new SetBirthdayRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSimplePropertyRequest$Type extends MessageType<GetSimplePropertyRequest> {
    constructor() {
        super("GetSimplePropertyRequest", []);
    }
    create(value?: PartialMessage<GetSimplePropertyRequest>): GetSimplePropertyRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSimplePropertyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSimplePropertyRequest): GetSimplePropertyRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetSimplePropertyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetSimplePropertyRequest
 */
export const GetSimplePropertyRequest = new GetSimplePropertyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerResultCodePush$Type extends MessageType<ServerResultCodePush> {
    constructor() {
        super("ServerResultCodePush", [
            { no: 1, name: "resultCode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ServerResultCodePush>): ServerResultCodePush {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServerResultCodePush>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerResultCodePush): ServerResultCodePush {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 resultCode */ 1:
                    message.resultCode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerResultCodePush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 resultCode = 1; */
        if (message.resultCode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.resultCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServerResultCodePush
 */
export const ServerResultCodePush = new ServerResultCodePush$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RenameRequest$Type extends MessageType<RenameRequest> {
    constructor() {
        super("RenameRequest", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "guideId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "stepId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RenameRequest>): RenameRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RenameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RenameRequest): RenameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional int32 guideId */ 2:
                    message.guideId = reader.int32();
                    break;
                case /* optional int32 stepId */ 3:
                    message.stepId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RenameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional int32 guideId = 2; */
        if (message.guideId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.guideId);
        /* optional int32 stepId = 3; */
        if (message.stepId !== undefined)
            writer.tag(3, WireType.Varint).int32(message.stepId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RenameRequest
 */
export const RenameRequest = new RenameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetSimplePropertyRequest$Type extends MessageType<SetSimplePropertyRequest> {
    constructor() {
        super("SetSimplePropertyRequest", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "property", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetSimplePropertyRequest>): SetSimplePropertyRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetSimplePropertyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetSimplePropertyRequest): SetSimplePropertyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* optional string property */ 2:
                    message.property = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetSimplePropertyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* optional string property = 2; */
        if (message.property !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.property);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetSimplePropertyRequest
 */
export const SetSimplePropertyRequest = new SetSimplePropertyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPlayerInfoReply$Type extends MessageType<GetPlayerInfoReply> {
    constructor() {
        super("GetPlayerInfoReply", [
            { no: 1, name: "playerInfo", kind: "message", T: () => PlayerInfo },
            { no: 2, name: "openinfos", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => OpenInfo },
            { no: 3, name: "canRename", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "mainThumbnail", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "extRename", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetPlayerInfoReply>): GetPlayerInfoReply {
        const message = { openinfos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPlayerInfoReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPlayerInfoReply): GetPlayerInfoReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional PlayerInfo playerInfo */ 1:
                    message.playerInfo = PlayerInfo.internalBinaryRead(reader, reader.uint32(), options, message.playerInfo);
                    break;
                case /* repeated OpenInfo openinfos */ 2:
                    message.openinfos.push(OpenInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool canRename */ 3:
                    message.canRename = reader.bool();
                    break;
                case /* optional bool mainThumbnail */ 4:
                    message.mainThumbnail = reader.bool();
                    break;
                case /* optional int32 extRename */ 5:
                    message.extRename = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPlayerInfoReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional PlayerInfo playerInfo = 1; */
        if (message.playerInfo)
            PlayerInfo.internalBinaryWrite(message.playerInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated OpenInfo openinfos = 2; */
        for (let i = 0; i < message.openinfos.length; i++)
            OpenInfo.internalBinaryWrite(message.openinfos[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional bool canRename = 3; */
        if (message.canRename !== undefined)
            writer.tag(3, WireType.Varint).bool(message.canRename);
        /* optional bool mainThumbnail = 4; */
        if (message.mainThumbnail !== undefined)
            writer.tag(4, WireType.Varint).bool(message.mainThumbnail);
        /* optional int32 extRename = 5; */
        if (message.extRename !== undefined)
            writer.tag(5, WireType.Varint).int32(message.extRename);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPlayerInfoReply
 */
export const GetPlayerInfoReply = new GetPlayerInfoReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetClothInfoReply$Type extends MessageType<GetClothInfoReply> {
    constructor() {
        super("GetClothInfoReply", [
            { no: 1, name: "clothInfos", kind: "message", T: () => PlayerClothInfo }
        ]);
    }
    create(value?: PartialMessage<GetClothInfoReply>): GetClothInfoReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetClothInfoReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetClothInfoReply): GetClothInfoReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional PlayerClothInfo clothInfos */ 1:
                    message.clothInfos = PlayerClothInfo.internalBinaryRead(reader, reader.uint32(), options, message.clothInfos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetClothInfoReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional PlayerClothInfo clothInfos = 1; */
        if (message.clothInfos)
            PlayerClothInfo.internalBinaryWrite(message.clothInfos, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetClothInfoReply
 */
export const GetClothInfoReply = new GetClothInfoReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPortraitReply$Type extends MessageType<SetPortraitReply> {
    constructor() {
        super("SetPortraitReply", []);
    }
    create(value?: PartialMessage<SetPortraitReply>): SetPortraitReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetPortraitReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPortraitReply): SetPortraitReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SetPortraitReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetPortraitReply
 */
export const SetPortraitReply = new SetPortraitReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SimpleProperty$Type extends MessageType<SimpleProperty> {
    constructor() {
        super("SimpleProperty", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "property", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SimpleProperty>): SimpleProperty {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SimpleProperty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimpleProperty): SimpleProperty {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* optional string property */ 2:
                    message.property = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimpleProperty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* optional string property = 2; */
        if (message.property !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.property);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SimpleProperty
 */
export const SimpleProperty = new SimpleProperty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClothUpdatePush$Type extends MessageType<ClothUpdatePush> {
    constructor() {
        super("ClothUpdatePush", [
            { no: 1, name: "updateInfos", kind: "message", T: () => PlayerClothInfo }
        ]);
    }
    create(value?: PartialMessage<ClothUpdatePush>): ClothUpdatePush {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClothUpdatePush>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClothUpdatePush): ClothUpdatePush {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional PlayerClothInfo updateInfos */ 1:
                    message.updateInfos = PlayerClothInfo.internalBinaryRead(reader, reader.uint32(), options, message.updateInfos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClothUpdatePush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional PlayerClothInfo updateInfos = 1; */
        if (message.updateInfos)
            PlayerClothInfo.internalBinaryWrite(message.updateInfos, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ClothUpdatePush
 */
export const ClothUpdatePush = new ClothUpdatePush$Type();
