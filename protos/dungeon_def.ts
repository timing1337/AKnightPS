// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "dungeon_def.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message UserDungeon
 */
export interface UserDungeon {
    /**
     * @generated from protobuf field: optional int32 chapterId = 1;
     */
    chapterId?: number;
    /**
     * @generated from protobuf field: optional int32 episodeId = 2;
     */
    episodeId?: number;
    /**
     * @generated from protobuf field: optional int32 star = 3;
     */
    star?: number;
    /**
     * @generated from protobuf field: optional int32 challengeCount = 4;
     */
    challengeCount?: number;
    /**
     * @generated from protobuf field: optional bool hasRecord = 5;
     */
    hasRecord?: boolean;
    /**
     * @generated from protobuf field: optional int32 leftReturnAllNum = 6;
     */
    leftReturnAllNum?: number;
    /**
     * @generated from protobuf field: optional int32 todayPassNum = 7;
     */
    todayPassNum?: number;
    /**
     * @generated from protobuf field: optional int32 todayTotalNum = 8;
     */
    todayTotalNum?: number;
}
/**
 * @generated from protobuf message UserChapterTypeNum
 */
export interface UserChapterTypeNum {
    /**
     * @generated from protobuf field: optional int32 chapterType = 1;
     */
    chapterType?: number;
    /**
     * @generated from protobuf field: optional int32 todayPassNum = 2;
     */
    todayPassNum?: number;
    /**
     * @generated from protobuf field: optional int32 todayTotalNum = 3;
     */
    todayTotalNum?: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class UserDungeon$Type extends MessageType<UserDungeon> {
    constructor() {
        super("UserDungeon", [
            { no: 1, name: "chapterId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "episodeId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "star", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "challengeCount", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "hasRecord", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "leftReturnAllNum", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "todayPassNum", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "todayTotalNum", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UserDungeon>): UserDungeon {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserDungeon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserDungeon): UserDungeon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 chapterId */ 1:
                    message.chapterId = reader.int32();
                    break;
                case /* optional int32 episodeId */ 2:
                    message.episodeId = reader.int32();
                    break;
                case /* optional int32 star */ 3:
                    message.star = reader.int32();
                    break;
                case /* optional int32 challengeCount */ 4:
                    message.challengeCount = reader.int32();
                    break;
                case /* optional bool hasRecord */ 5:
                    message.hasRecord = reader.bool();
                    break;
                case /* optional int32 leftReturnAllNum */ 6:
                    message.leftReturnAllNum = reader.int32();
                    break;
                case /* optional int32 todayPassNum */ 7:
                    message.todayPassNum = reader.int32();
                    break;
                case /* optional int32 todayTotalNum */ 8:
                    message.todayTotalNum = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserDungeon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 chapterId = 1; */
        if (message.chapterId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.chapterId);
        /* optional int32 episodeId = 2; */
        if (message.episodeId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.episodeId);
        /* optional int32 star = 3; */
        if (message.star !== undefined)
            writer.tag(3, WireType.Varint).int32(message.star);
        /* optional int32 challengeCount = 4; */
        if (message.challengeCount !== undefined)
            writer.tag(4, WireType.Varint).int32(message.challengeCount);
        /* optional bool hasRecord = 5; */
        if (message.hasRecord !== undefined)
            writer.tag(5, WireType.Varint).bool(message.hasRecord);
        /* optional int32 leftReturnAllNum = 6; */
        if (message.leftReturnAllNum !== undefined)
            writer.tag(6, WireType.Varint).int32(message.leftReturnAllNum);
        /* optional int32 todayPassNum = 7; */
        if (message.todayPassNum !== undefined)
            writer.tag(7, WireType.Varint).int32(message.todayPassNum);
        /* optional int32 todayTotalNum = 8; */
        if (message.todayTotalNum !== undefined)
            writer.tag(8, WireType.Varint).int32(message.todayTotalNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UserDungeon
 */
export const UserDungeon = new UserDungeon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserChapterTypeNum$Type extends MessageType<UserChapterTypeNum> {
    constructor() {
        super("UserChapterTypeNum", [
            { no: 1, name: "chapterType", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "todayPassNum", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "todayTotalNum", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UserChapterTypeNum>): UserChapterTypeNum {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserChapterTypeNum>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserChapterTypeNum): UserChapterTypeNum {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 chapterType */ 1:
                    message.chapterType = reader.int32();
                    break;
                case /* optional int32 todayPassNum */ 2:
                    message.todayPassNum = reader.int32();
                    break;
                case /* optional int32 todayTotalNum */ 3:
                    message.todayTotalNum = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserChapterTypeNum, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 chapterType = 1; */
        if (message.chapterType !== undefined)
            writer.tag(1, WireType.Varint).int32(message.chapterType);
        /* optional int32 todayPassNum = 2; */
        if (message.todayPassNum !== undefined)
            writer.tag(2, WireType.Varint).int32(message.todayPassNum);
        /* optional int32 todayTotalNum = 3; */
        if (message.todayTotalNum !== undefined)
            writer.tag(3, WireType.Varint).int32(message.todayTotalNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UserChapterTypeNum
 */
export const UserChapterTypeNum = new UserChapterTypeNum$Type();
