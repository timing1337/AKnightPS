// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "task_module.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Task
 */
export interface Task {
    /**
     * @generated from protobuf field: repeated int32 id = 1;
     */
    id: number[];
    /**
     * @generated from protobuf field: repeated int32 progress = 2;
     */
    progress: number[];
    /**
     * @generated from protobuf field: repeated bool hasFinished = 3;
     */
    hasFinished: boolean[];
    /**
     * @generated from protobuf field: optional int32 finishCount = 4;
     */
    finishCount?: number;
    /**
     * @generated from protobuf field: optional int32 type = 5;
     */
    type?: number;
    /**
     * @generated from protobuf field: optional int32 expiryTime = 6;
     */
    expiryTime?: number;
}
/**
 * @generated from protobuf message TaskActivityInfo
 */
export interface TaskActivityInfo {
    /**
     * @generated from protobuf field: repeated int32 typeId = 1;
     */
    typeId: number[];
    /**
     * @generated from protobuf field: repeated int32 defineId = 2;
     */
    defineId: number[];
    /**
     * @generated from protobuf field: repeated int32 value = 3;
     */
    value: number[];
    /**
     * @generated from protobuf field: optional int32 gainValue = 4;
     */
    gainValue?: number;
    /**
     * @generated from protobuf field: repeated int32 expiryTime = 5;
     */
    expiryTime: number[];
}
/**
 * @generated from protobuf message GetTaskInfoRequest
 */
export interface GetTaskInfoRequest {
    /**
     * @generated from protobuf field: uint32 typeIds = 1;
     */
    typeIds: number;
}
/**
 * @generated from protobuf message FinishAllTaskRequest
 */
export interface FinishAllTaskRequest {
    /**
     * @generated from protobuf field: optional int32 typeId = 1;
     */
    typeId?: number;
    /**
     * @generated from protobuf field: optional int32 minTypeId = 2;
     */
    minTypeId?: number;
    /**
     * @generated from protobuf field: int32 taskIds = 3;
     */
    taskIds: number;
}
/**
 * @generated from protobuf message GetTaskActivityBonusReply
 */
export interface GetTaskActivityBonusReply {
    /**
     * @generated from protobuf field: optional int32 typeId = 1;
     */
    typeId?: number;
    /**
     * @generated from protobuf field: optional int32 defineId = 2;
     */
    defineId?: number;
}
/**
 * @generated from protobuf message FinishAllTaskReply
 */
export interface FinishAllTaskReply {
    /**
     * @generated from protobuf field: optional int32 typeId = 1;
     */
    typeId?: number;
    /**
     * @generated from protobuf field: optional int32 minTypeId = 2;
     */
    minTypeId?: number;
    /**
     * @generated from protobuf field: int32 taskIds = 3;
     */
    taskIds: number;
}
/**
 * @generated from protobuf message GetTaskActivityBonusRequest
 */
export interface GetTaskActivityBonusRequest {
    /**
     * @generated from protobuf field: optional int32 typeId = 1;
     */
    typeId?: number;
    /**
     * @generated from protobuf field: optional int32 defineId = 2;
     */
    defineId?: number;
}
/**
 * @generated from protobuf message UpdateTaskPush
 */
export interface UpdateTaskPush {
    /**
     * @generated from protobuf field: Task taskInfo = 1;
     */
    taskInfo?: Task;
    /**
     * @generated from protobuf field: TaskActivityInfo activityInfo = 2;
     */
    activityInfo?: TaskActivityInfo;
}
/**
 * @generated from protobuf message FinishTaskRequest
 */
export interface FinishTaskRequest {
    /**
     * @generated from protobuf field: repeated int32 id = 1;
     */
    id: number[];
}
/**
 * @generated from protobuf message FinishTaskReply
 */
export interface FinishTaskReply {
    /**
     * @generated from protobuf field: optional int32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional int32 finishCount = 2;
     */
    finishCount?: number;
}
/**
 * @generated from protobuf message DeleteTaskPush
 */
export interface DeleteTaskPush {
    /**
     * @generated from protobuf field: int32 taskIds = 1;
     */
    taskIds: number;
}
/**
 * @generated from protobuf message GetTaskInfoReply
 */
export interface GetTaskInfoReply {
    /**
     * @generated from protobuf field: Task taskInfo = 1;
     */
    taskInfo?: Task;
    /**
     * @generated from protobuf field: TaskActivityInfo activityInfo = 2;
     */
    activityInfo?: TaskActivityInfo;
    /**
     * @generated from protobuf field: uint32 typeIds = 3;
     */
    typeIds: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class Task$Type extends MessageType<Task> {
    constructor() {
        super("Task", [
            { no: 1, name: "id", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "progress", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "hasFinished", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "finishCount", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "type", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "expiryTime", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Task>): Task {
        const message = { id: [], progress: [], hasFinished: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Task>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Task): Task {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 id */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.id.push(reader.int32());
                    else
                        message.id.push(reader.int32());
                    break;
                case /* repeated int32 progress */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.progress.push(reader.int32());
                    else
                        message.progress.push(reader.int32());
                    break;
                case /* repeated bool hasFinished */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.hasFinished.push(reader.bool());
                    else
                        message.hasFinished.push(reader.bool());
                    break;
                case /* optional int32 finishCount */ 4:
                    message.finishCount = reader.int32();
                    break;
                case /* optional int32 type */ 5:
                    message.type = reader.int32();
                    break;
                case /* optional int32 expiryTime */ 6:
                    message.expiryTime = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Task, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 id = 1; */
        for (let i = 0; i < message.id.length; i++)
            writer.tag(1, WireType.Varint).int32(message.id[i]);
        /* repeated int32 progress = 2; */
        for (let i = 0; i < message.progress.length; i++)
            writer.tag(2, WireType.Varint).int32(message.progress[i]);
        /* repeated bool hasFinished = 3; */
        for (let i = 0; i < message.hasFinished.length; i++)
            writer.tag(3, WireType.Varint).bool(message.hasFinished[i]);
        /* optional int32 finishCount = 4; */
        if (message.finishCount !== undefined)
            writer.tag(4, WireType.Varint).int32(message.finishCount);
        /* optional int32 type = 5; */
        if (message.type !== undefined)
            writer.tag(5, WireType.Varint).int32(message.type);
        /* optional int32 expiryTime = 6; */
        if (message.expiryTime !== undefined)
            writer.tag(6, WireType.Varint).int32(message.expiryTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Task
 */
export const Task = new Task$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskActivityInfo$Type extends MessageType<TaskActivityInfo> {
    constructor() {
        super("TaskActivityInfo", [
            { no: 1, name: "typeId", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "defineId", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "value", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "gainValue", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "expiryTime", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TaskActivityInfo>): TaskActivityInfo {
        const message = { typeId: [], defineId: [], value: [], expiryTime: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskActivityInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskActivityInfo): TaskActivityInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 typeId */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.typeId.push(reader.int32());
                    else
                        message.typeId.push(reader.int32());
                    break;
                case /* repeated int32 defineId */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.defineId.push(reader.int32());
                    else
                        message.defineId.push(reader.int32());
                    break;
                case /* repeated int32 value */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.value.push(reader.int32());
                    else
                        message.value.push(reader.int32());
                    break;
                case /* optional int32 gainValue */ 4:
                    message.gainValue = reader.int32();
                    break;
                case /* repeated int32 expiryTime */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.expiryTime.push(reader.int32());
                    else
                        message.expiryTime.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskActivityInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 typeId = 1; */
        for (let i = 0; i < message.typeId.length; i++)
            writer.tag(1, WireType.Varint).int32(message.typeId[i]);
        /* repeated int32 defineId = 2; */
        for (let i = 0; i < message.defineId.length; i++)
            writer.tag(2, WireType.Varint).int32(message.defineId[i]);
        /* repeated int32 value = 3; */
        for (let i = 0; i < message.value.length; i++)
            writer.tag(3, WireType.Varint).int32(message.value[i]);
        /* optional int32 gainValue = 4; */
        if (message.gainValue !== undefined)
            writer.tag(4, WireType.Varint).int32(message.gainValue);
        /* repeated int32 expiryTime = 5; */
        for (let i = 0; i < message.expiryTime.length; i++)
            writer.tag(5, WireType.Varint).int32(message.expiryTime[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TaskActivityInfo
 */
export const TaskActivityInfo = new TaskActivityInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTaskInfoRequest$Type extends MessageType<GetTaskInfoRequest> {
    constructor() {
        super("GetTaskInfoRequest", [
            { no: 1, name: "typeIds", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetTaskInfoRequest>): GetTaskInfoRequest {
        const message = { typeIds: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetTaskInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTaskInfoRequest): GetTaskInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 typeIds */ 1:
                    message.typeIds = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTaskInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 typeIds = 1; */
        if (message.typeIds !== 0)
            writer.tag(1, WireType.Varint).uint32(message.typeIds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTaskInfoRequest
 */
export const GetTaskInfoRequest = new GetTaskInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishAllTaskRequest$Type extends MessageType<FinishAllTaskRequest> {
    constructor() {
        super("FinishAllTaskRequest", [
            { no: 1, name: "typeId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "minTypeId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "taskIds", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FinishAllTaskRequest>): FinishAllTaskRequest {
        const message = { taskIds: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FinishAllTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishAllTaskRequest): FinishAllTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 typeId */ 1:
                    message.typeId = reader.int32();
                    break;
                case /* optional int32 minTypeId */ 2:
                    message.minTypeId = reader.int32();
                    break;
                case /* int32 taskIds */ 3:
                    message.taskIds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinishAllTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 typeId = 1; */
        if (message.typeId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.typeId);
        /* optional int32 minTypeId = 2; */
        if (message.minTypeId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.minTypeId);
        /* int32 taskIds = 3; */
        if (message.taskIds !== 0)
            writer.tag(3, WireType.Varint).int32(message.taskIds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FinishAllTaskRequest
 */
export const FinishAllTaskRequest = new FinishAllTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTaskActivityBonusReply$Type extends MessageType<GetTaskActivityBonusReply> {
    constructor() {
        super("GetTaskActivityBonusReply", [
            { no: 1, name: "typeId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "defineId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetTaskActivityBonusReply>): GetTaskActivityBonusReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetTaskActivityBonusReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTaskActivityBonusReply): GetTaskActivityBonusReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 typeId */ 1:
                    message.typeId = reader.int32();
                    break;
                case /* optional int32 defineId */ 2:
                    message.defineId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTaskActivityBonusReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 typeId = 1; */
        if (message.typeId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.typeId);
        /* optional int32 defineId = 2; */
        if (message.defineId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.defineId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTaskActivityBonusReply
 */
export const GetTaskActivityBonusReply = new GetTaskActivityBonusReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishAllTaskReply$Type extends MessageType<FinishAllTaskReply> {
    constructor() {
        super("FinishAllTaskReply", [
            { no: 1, name: "typeId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "minTypeId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "taskIds", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FinishAllTaskReply>): FinishAllTaskReply {
        const message = { taskIds: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FinishAllTaskReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishAllTaskReply): FinishAllTaskReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 typeId */ 1:
                    message.typeId = reader.int32();
                    break;
                case /* optional int32 minTypeId */ 2:
                    message.minTypeId = reader.int32();
                    break;
                case /* int32 taskIds */ 3:
                    message.taskIds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinishAllTaskReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 typeId = 1; */
        if (message.typeId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.typeId);
        /* optional int32 minTypeId = 2; */
        if (message.minTypeId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.minTypeId);
        /* int32 taskIds = 3; */
        if (message.taskIds !== 0)
            writer.tag(3, WireType.Varint).int32(message.taskIds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FinishAllTaskReply
 */
export const FinishAllTaskReply = new FinishAllTaskReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTaskActivityBonusRequest$Type extends MessageType<GetTaskActivityBonusRequest> {
    constructor() {
        super("GetTaskActivityBonusRequest", [
            { no: 1, name: "typeId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "defineId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetTaskActivityBonusRequest>): GetTaskActivityBonusRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetTaskActivityBonusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTaskActivityBonusRequest): GetTaskActivityBonusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 typeId */ 1:
                    message.typeId = reader.int32();
                    break;
                case /* optional int32 defineId */ 2:
                    message.defineId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTaskActivityBonusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 typeId = 1; */
        if (message.typeId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.typeId);
        /* optional int32 defineId = 2; */
        if (message.defineId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.defineId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTaskActivityBonusRequest
 */
export const GetTaskActivityBonusRequest = new GetTaskActivityBonusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTaskPush$Type extends MessageType<UpdateTaskPush> {
    constructor() {
        super("UpdateTaskPush", [
            { no: 1, name: "taskInfo", kind: "message", T: () => Task },
            { no: 2, name: "activityInfo", kind: "message", T: () => TaskActivityInfo }
        ]);
    }
    create(value?: PartialMessage<UpdateTaskPush>): UpdateTaskPush {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateTaskPush>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTaskPush): UpdateTaskPush {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Task taskInfo */ 1:
                    message.taskInfo = Task.internalBinaryRead(reader, reader.uint32(), options, message.taskInfo);
                    break;
                case /* TaskActivityInfo activityInfo */ 2:
                    message.activityInfo = TaskActivityInfo.internalBinaryRead(reader, reader.uint32(), options, message.activityInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTaskPush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Task taskInfo = 1; */
        if (message.taskInfo)
            Task.internalBinaryWrite(message.taskInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* TaskActivityInfo activityInfo = 2; */
        if (message.activityInfo)
            TaskActivityInfo.internalBinaryWrite(message.activityInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateTaskPush
 */
export const UpdateTaskPush = new UpdateTaskPush$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishTaskRequest$Type extends MessageType<FinishTaskRequest> {
    constructor() {
        super("FinishTaskRequest", [
            { no: 1, name: "id", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FinishTaskRequest>): FinishTaskRequest {
        const message = { id: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FinishTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishTaskRequest): FinishTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 id */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.id.push(reader.int32());
                    else
                        message.id.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinishTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 id = 1; */
        for (let i = 0; i < message.id.length; i++)
            writer.tag(1, WireType.Varint).int32(message.id[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FinishTaskRequest
 */
export const FinishTaskRequest = new FinishTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishTaskReply$Type extends MessageType<FinishTaskReply> {
    constructor() {
        super("FinishTaskReply", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "finishCount", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FinishTaskReply>): FinishTaskReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FinishTaskReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishTaskReply): FinishTaskReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* optional int32 finishCount */ 2:
                    message.finishCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinishTaskReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* optional int32 finishCount = 2; */
        if (message.finishCount !== undefined)
            writer.tag(2, WireType.Varint).int32(message.finishCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FinishTaskReply
 */
export const FinishTaskReply = new FinishTaskReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTaskPush$Type extends MessageType<DeleteTaskPush> {
    constructor() {
        super("DeleteTaskPush", [
            { no: 1, name: "taskIds", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteTaskPush>): DeleteTaskPush {
        const message = { taskIds: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteTaskPush>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteTaskPush): DeleteTaskPush {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 taskIds */ 1:
                    message.taskIds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteTaskPush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 taskIds = 1; */
        if (message.taskIds !== 0)
            writer.tag(1, WireType.Varint).int32(message.taskIds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteTaskPush
 */
export const DeleteTaskPush = new DeleteTaskPush$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTaskInfoReply$Type extends MessageType<GetTaskInfoReply> {
    constructor() {
        super("GetTaskInfoReply", [
            { no: 1, name: "taskInfo", kind: "message", T: () => Task },
            { no: 2, name: "activityInfo", kind: "message", T: () => TaskActivityInfo },
            { no: 3, name: "typeIds", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetTaskInfoReply>): GetTaskInfoReply {
        const message = { typeIds: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetTaskInfoReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTaskInfoReply): GetTaskInfoReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Task taskInfo */ 1:
                    message.taskInfo = Task.internalBinaryRead(reader, reader.uint32(), options, message.taskInfo);
                    break;
                case /* TaskActivityInfo activityInfo */ 2:
                    message.activityInfo = TaskActivityInfo.internalBinaryRead(reader, reader.uint32(), options, message.activityInfo);
                    break;
                case /* uint32 typeIds */ 3:
                    message.typeIds = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTaskInfoReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Task taskInfo = 1; */
        if (message.taskInfo)
            Task.internalBinaryWrite(message.taskInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* TaskActivityInfo activityInfo = 2; */
        if (message.activityInfo)
            TaskActivityInfo.internalBinaryWrite(message.activityInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint32 typeIds = 3; */
        if (message.typeIds !== 0)
            writer.tag(3, WireType.Varint).uint32(message.typeIds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetTaskInfoReply
 */
export const GetTaskInfoReply = new GetTaskInfoReply$Type();
