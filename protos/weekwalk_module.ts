// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "weekwalk_module.proto" (syntax proto2)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { EpisodeHeroRecommendInfo } from "./dungeon_module";
/**
 * @generated from protobuf message MarkPopDeepSettleReply
 */
export interface MarkPopDeepSettleReply {
}
/**
 * @generated from protobuf message WeekwalkInfo
 */
export interface WeekwalkInfo {
    /**
     * @generated from protobuf field: optional int32 time = 1;
     */
    time?: number;
    /**
     * @generated from protobuf field: optional int32 endTime = 2;
     */
    endTime?: number;
    /**
     * @generated from protobuf field: MapInfo mapInfo = 3;
     */
    mapInfo?: MapInfo;
    /**
     * @generated from protobuf field: optional int32 maxLayer = 4;
     */
    maxLayer?: number;
    /**
     * @generated from protobuf field: optional int32 issueId = 5;
     */
    issueId?: number;
    /**
     * @generated from protobuf field: optional bool isPopDeepRule = 6;
     */
    isPopDeepRule?: boolean;
    /**
     * @generated from protobuf field: optional bool isOpenDeep = 7;
     */
    isOpenDeep?: boolean;
    /**
     * @generated from protobuf field: optional bool isPopShallowSettle = 8;
     */
    isPopShallowSettle?: boolean;
    /**
     * @generated from protobuf field: optional bool isPopDeepSettle = 9;
     */
    isPopDeepSettle?: boolean;
    /**
     * @generated from protobuf field: optional string deepProgress = 10;
     */
    deepProgress?: string;
}
/**
 * @generated from protobuf message ResetLayerRequest
 */
export interface ResetLayerRequest {
    /**
     * @generated from protobuf field: optional int32 layerId = 1;
     */
    layerId?: number;
    /**
     * @generated from protobuf field: optional int32 battleId = 2;
     */
    battleId?: number;
}
/**
 * @generated from protobuf message WeekwalkGeneralReply
 */
export interface WeekwalkGeneralReply {
    /**
     * @generated from protobuf field: optional int32 elementId = 1;
     */
    elementId?: number;
    /**
     * @generated from protobuf field: optional int32 layerId = 2;
     */
    layerId?: number;
}
/**
 * @generated from protobuf message WeekwalkDialogHistoryReply
 */
export interface WeekwalkDialogHistoryReply {
    /**
     * @generated from protobuf field: optional int32 elementId = 1;
     */
    elementId?: number;
    /**
     * @generated from protobuf field: string historylist = 2;
     */
    historylist: string;
    /**
     * @generated from protobuf field: optional int32 layerId = 3;
     */
    layerId?: number;
}
/**
 * @generated from protobuf message MarkPopDeepRuleReply
 */
export interface MarkPopDeepRuleReply {
}
/**
 * @generated from protobuf message GetWeekwalkInfoReply
 */
export interface GetWeekwalkInfoReply {
    /**
     * @generated from protobuf field: optional WeekwalkInfo info = 1;
     */
    info?: WeekwalkInfo;
    /**
     * @generated from protobuf field: optional int32 timeThisWeek = 2;
     */
    timeThisWeek?: number;
}
/**
 * @generated from protobuf message BattleInfo
 */
export interface BattleInfo {
    /**
     * @generated from protobuf field: optional int32 battleId = 1;
     */
    battleId?: number;
    /**
     * @generated from protobuf field: optional int32 star = 2;
     */
    star?: number;
    /**
     * @generated from protobuf field: optional int32 maxStar = 3;
     */
    maxStar?: number;
    /**
     * @generated from protobuf field: int32 heroIds = 4;
     */
    heroIds: number;
}
/**
 * @generated from protobuf message GetWeekwalkInfoRequest
 */
export interface GetWeekwalkInfoRequest {
}
/**
 * @generated from protobuf message MarkShowFinishedReply
 */
export interface MarkShowFinishedReply {
    /**
     * @generated from protobuf field: optional int32 layerId = 1;
     */
    layerId?: number;
}
/**
 * @generated from protobuf message MapInfo
 */
export interface MapInfo {
    /**
     * @generated from protobuf field: optional int32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional int32 sceneId = 2;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional int32 isFinish = 3;
     */
    isFinish?: number;
    /**
     * @generated from protobuf field: optional int32 isFinished = 4;
     */
    isFinished?: number;
    /**
     * @generated from protobuf field: optional int32 buffId = 5;
     */
    buffId?: number;
    /**
     * @generated from protobuf field: optional bool isShowBuff = 6;
     */
    isShowBuff?: boolean;
    /**
     * @generated from protobuf field: optional bool isShowFinished = 7;
     */
    isShowFinished?: boolean;
    /**
     * @generated from protobuf field: optional bool isShowSelectCd = 8;
     */
    isShowSelectCd?: boolean;
    /**
     * @generated from protobuf field: BattleInfo battleInfos = 9;
     */
    battleInfos?: BattleInfo;
    /**
     * @generated from protobuf field: WeekwalkElementInfo elementInfos = 10;
     */
    elementInfos?: WeekwalkElementInfo;
    /**
     * @generated from protobuf field: WeekwalkHeroInfo heroInfos = 11;
     */
    heroInfos?: WeekwalkHeroInfo;
    /**
     * @generated from protobuf field: int32 storyIds = 12;
     */
    storyIds: number;
}
/**
 * @generated from protobuf message MarkShowBuffRequest
 */
export interface MarkShowBuffRequest {
    /**
     * @generated from protobuf field: optional int32 layerId = 1;
     */
    layerId?: number;
}
/**
 * @generated from protobuf message BeforeStartWeekwalkBattleRequest
 */
export interface BeforeStartWeekwalkBattleRequest {
    /**
     * @generated from protobuf field: optional int32 elementId = 1;
     */
    elementId?: number;
    /**
     * @generated from protobuf field: optional int32 layerId = 2;
     */
    layerId?: number;
}
/**
 * @generated from protobuf message MarkPopShallowSettleReply
 */
export interface MarkPopShallowSettleReply {
}
/**
 * @generated from protobuf message SelectNotCdHeroReply
 */
export interface SelectNotCdHeroReply {
    /**
     * @generated from protobuf field: optional int32 layerId = 1;
     */
    layerId?: number;
    /**
     * @generated from protobuf field: int32 heroId = 2;
     */
    heroId: number;
}
/**
 * @generated from protobuf message MarkPopDeepRuleRequest
 */
export interface MarkPopDeepRuleRequest {
}
/**
 * @generated from protobuf message WeekwalkHeroRecommendRequest
 */
export interface WeekwalkHeroRecommendRequest {
    /**
     * @generated from protobuf field: optional int32 elementId = 1;
     */
    elementId?: number;
    /**
     * @generated from protobuf field: optional int32 layerId = 2;
     */
    layerId?: number;
}
/**
 * @generated from protobuf message WeekwalkDialogRequest
 */
export interface WeekwalkDialogRequest {
    /**
     * @generated from protobuf field: optional int32 elementId = 1;
     */
    elementId?: number;
    /**
     * @generated from protobuf field: optional int32 option = 2;
     */
    option?: number;
    /**
     * @generated from protobuf field: optional int32 layerId = 3;
     */
    layerId?: number;
}
/**
 * @generated from protobuf message MarkShowFinishedRequest
 */
export interface MarkShowFinishedRequest {
    /**
     * @generated from protobuf field: optional int32 layerId = 1;
     */
    layerId?: number;
}
/**
 * @generated from protobuf message MarkShowBuffReply
 */
export interface MarkShowBuffReply {
    /**
     * @generated from protobuf field: optional int32 layerId = 1;
     */
    layerId?: number;
}
/**
 * @generated from protobuf message WeekwalkHeroInfo
 */
export interface WeekwalkHeroInfo {
    /**
     * @generated from protobuf field: optional int32 heroId = 1;
     */
    heroId?: number;
    /**
     * @generated from protobuf field: optional int32 cd = 2;
     */
    cd?: number;
}
/**
 * @generated from protobuf message WeekwalkGeneralRequest
 */
export interface WeekwalkGeneralRequest {
    /**
     * @generated from protobuf field: optional int32 elementId = 1;
     */
    elementId?: number;
    /**
     * @generated from protobuf field: optional int32 layerId = 2;
     */
    layerId?: number;
}
/**
 * @generated from protobuf message WeekwalkDialogReply
 */
export interface WeekwalkDialogReply {
    /**
     * @generated from protobuf field: optional int32 elementId = 1;
     */
    elementId?: number;
    /**
     * @generated from protobuf field: optional int32 option = 2;
     */
    option?: number;
    /**
     * @generated from protobuf field: optional int32 layerId = 3;
     */
    layerId?: number;
}
/**
 * @generated from protobuf message MarkPopShallowSettleRequest
 */
export interface MarkPopShallowSettleRequest {
}
/**
 * @generated from protobuf message SelectNotCdHeroRequest
 */
export interface SelectNotCdHeroRequest {
    /**
     * @generated from protobuf field: optional int32 layerId = 1;
     */
    layerId?: number;
    /**
     * @generated from protobuf field: int32 heroId = 2;
     */
    heroId: number;
}
/**
 * @generated from protobuf message MarkPopDeepSettleRequest
 */
export interface MarkPopDeepSettleRequest {
}
/**
 * @generated from protobuf message WeekwalkHeroRecommendReply
 */
export interface WeekwalkHeroRecommendReply {
    /**
     * @generated from protobuf field: EpisodeHeroRecommendInfo racommends = 1;
     */
    racommends?: EpisodeHeroRecommendInfo;
}
/**
 * @generated from protobuf message BeforeStartWeekwalkBattleReply
 */
export interface BeforeStartWeekwalkBattleReply {
    /**
     * @generated from protobuf field: optional int32 elementId = 1;
     */
    elementId?: number;
    /**
     * @generated from protobuf field: optional int32 layerId = 2;
     */
    layerId?: number;
}
/**
 * @generated from protobuf message WeekwalkDialogHistoryRequest
 */
export interface WeekwalkDialogHistoryRequest {
    /**
     * @generated from protobuf field: optional int32 elementId = 1;
     */
    elementId?: number;
    /**
     * @generated from protobuf field: string historylist = 2;
     */
    historylist: string;
    /**
     * @generated from protobuf field: optional int32 layerId = 3;
     */
    layerId?: number;
}
/**
 * @generated from protobuf message WeekwalkElementInfo
 */
export interface WeekwalkElementInfo {
    /**
     * @generated from protobuf field: optional int32 elementId = 1;
     */
    elementId?: number;
    /**
     * @generated from protobuf field: optional bool isFinish = 2;
     */
    isFinish?: boolean;
    /**
     * @generated from protobuf field: optional int32 index = 3;
     */
    index?: number;
    /**
     * @generated from protobuf field: string historylist = 4;
     */
    historylist: string;
    /**
     * @generated from protobuf field: optional bool visible = 5;
     */
    visible?: boolean;
}
/**
 * @generated from protobuf message ResetLayerReply
 */
export interface ResetLayerReply {
    /**
     * @generated from protobuf field: optional WeekwalkInfo info = 1;
     */
    info?: WeekwalkInfo;
}
/**
 * @generated from protobuf message WeekwalkInfoUpdatePush
 */
export interface WeekwalkInfoUpdatePush {
    /**
     * @generated from protobuf field: optional WeekwalkInfo info = 1;
     */
    info?: WeekwalkInfo;
}
// @generated message type with reflection information, may provide speed optimized methods
class MarkPopDeepSettleReply$Type extends MessageType<MarkPopDeepSettleReply> {
    constructor() {
        super("MarkPopDeepSettleReply", []);
    }
    create(value?: PartialMessage<MarkPopDeepSettleReply>): MarkPopDeepSettleReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MarkPopDeepSettleReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkPopDeepSettleReply): MarkPopDeepSettleReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MarkPopDeepSettleReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MarkPopDeepSettleReply
 */
export const MarkPopDeepSettleReply = new MarkPopDeepSettleReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeekwalkInfo$Type extends MessageType<WeekwalkInfo> {
    constructor() {
        super("WeekwalkInfo", [
            { no: 1, name: "time", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "endTime", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "mapInfo", kind: "message", T: () => MapInfo },
            { no: 4, name: "maxLayer", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "issueId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "isPopDeepRule", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "isOpenDeep", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "isPopShallowSettle", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "isPopDeepSettle", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "deepProgress", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WeekwalkInfo>): WeekwalkInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeekwalkInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeekwalkInfo): WeekwalkInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 time */ 1:
                    message.time = reader.int32();
                    break;
                case /* optional int32 endTime */ 2:
                    message.endTime = reader.int32();
                    break;
                case /* MapInfo mapInfo */ 3:
                    message.mapInfo = MapInfo.internalBinaryRead(reader, reader.uint32(), options, message.mapInfo);
                    break;
                case /* optional int32 maxLayer */ 4:
                    message.maxLayer = reader.int32();
                    break;
                case /* optional int32 issueId */ 5:
                    message.issueId = reader.int32();
                    break;
                case /* optional bool isPopDeepRule */ 6:
                    message.isPopDeepRule = reader.bool();
                    break;
                case /* optional bool isOpenDeep */ 7:
                    message.isOpenDeep = reader.bool();
                    break;
                case /* optional bool isPopShallowSettle */ 8:
                    message.isPopShallowSettle = reader.bool();
                    break;
                case /* optional bool isPopDeepSettle */ 9:
                    message.isPopDeepSettle = reader.bool();
                    break;
                case /* optional string deepProgress */ 10:
                    message.deepProgress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeekwalkInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 time = 1; */
        if (message.time !== undefined)
            writer.tag(1, WireType.Varint).int32(message.time);
        /* optional int32 endTime = 2; */
        if (message.endTime !== undefined)
            writer.tag(2, WireType.Varint).int32(message.endTime);
        /* MapInfo mapInfo = 3; */
        if (message.mapInfo)
            MapInfo.internalBinaryWrite(message.mapInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 maxLayer = 4; */
        if (message.maxLayer !== undefined)
            writer.tag(4, WireType.Varint).int32(message.maxLayer);
        /* optional int32 issueId = 5; */
        if (message.issueId !== undefined)
            writer.tag(5, WireType.Varint).int32(message.issueId);
        /* optional bool isPopDeepRule = 6; */
        if (message.isPopDeepRule !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isPopDeepRule);
        /* optional bool isOpenDeep = 7; */
        if (message.isOpenDeep !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isOpenDeep);
        /* optional bool isPopShallowSettle = 8; */
        if (message.isPopShallowSettle !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isPopShallowSettle);
        /* optional bool isPopDeepSettle = 9; */
        if (message.isPopDeepSettle !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isPopDeepSettle);
        /* optional string deepProgress = 10; */
        if (message.deepProgress !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.deepProgress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WeekwalkInfo
 */
export const WeekwalkInfo = new WeekwalkInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetLayerRequest$Type extends MessageType<ResetLayerRequest> {
    constructor() {
        super("ResetLayerRequest", [
            { no: 1, name: "layerId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "battleId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResetLayerRequest>): ResetLayerRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResetLayerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetLayerRequest): ResetLayerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 layerId */ 1:
                    message.layerId = reader.int32();
                    break;
                case /* optional int32 battleId */ 2:
                    message.battleId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetLayerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 layerId = 1; */
        if (message.layerId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.layerId);
        /* optional int32 battleId = 2; */
        if (message.battleId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.battleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ResetLayerRequest
 */
export const ResetLayerRequest = new ResetLayerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeekwalkGeneralReply$Type extends MessageType<WeekwalkGeneralReply> {
    constructor() {
        super("WeekwalkGeneralReply", [
            { no: 1, name: "elementId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "layerId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WeekwalkGeneralReply>): WeekwalkGeneralReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeekwalkGeneralReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeekwalkGeneralReply): WeekwalkGeneralReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 elementId */ 1:
                    message.elementId = reader.int32();
                    break;
                case /* optional int32 layerId */ 2:
                    message.layerId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeekwalkGeneralReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 elementId = 1; */
        if (message.elementId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.elementId);
        /* optional int32 layerId = 2; */
        if (message.layerId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.layerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WeekwalkGeneralReply
 */
export const WeekwalkGeneralReply = new WeekwalkGeneralReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeekwalkDialogHistoryReply$Type extends MessageType<WeekwalkDialogHistoryReply> {
    constructor() {
        super("WeekwalkDialogHistoryReply", [
            { no: 1, name: "elementId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "historylist", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "layerId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WeekwalkDialogHistoryReply>): WeekwalkDialogHistoryReply {
        const message = { historylist: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeekwalkDialogHistoryReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeekwalkDialogHistoryReply): WeekwalkDialogHistoryReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 elementId */ 1:
                    message.elementId = reader.int32();
                    break;
                case /* string historylist */ 2:
                    message.historylist = reader.string();
                    break;
                case /* optional int32 layerId */ 3:
                    message.layerId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeekwalkDialogHistoryReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 elementId = 1; */
        if (message.elementId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.elementId);
        /* string historylist = 2; */
        if (message.historylist !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.historylist);
        /* optional int32 layerId = 3; */
        if (message.layerId !== undefined)
            writer.tag(3, WireType.Varint).int32(message.layerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WeekwalkDialogHistoryReply
 */
export const WeekwalkDialogHistoryReply = new WeekwalkDialogHistoryReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkPopDeepRuleReply$Type extends MessageType<MarkPopDeepRuleReply> {
    constructor() {
        super("MarkPopDeepRuleReply", []);
    }
    create(value?: PartialMessage<MarkPopDeepRuleReply>): MarkPopDeepRuleReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MarkPopDeepRuleReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkPopDeepRuleReply): MarkPopDeepRuleReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MarkPopDeepRuleReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MarkPopDeepRuleReply
 */
export const MarkPopDeepRuleReply = new MarkPopDeepRuleReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetWeekwalkInfoReply$Type extends MessageType<GetWeekwalkInfoReply> {
    constructor() {
        super("GetWeekwalkInfoReply", [
            { no: 1, name: "info", kind: "message", T: () => WeekwalkInfo },
            { no: 2, name: "timeThisWeek", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetWeekwalkInfoReply>): GetWeekwalkInfoReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetWeekwalkInfoReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetWeekwalkInfoReply): GetWeekwalkInfoReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional WeekwalkInfo info */ 1:
                    message.info = WeekwalkInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                case /* optional int32 timeThisWeek */ 2:
                    message.timeThisWeek = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetWeekwalkInfoReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional WeekwalkInfo info = 1; */
        if (message.info)
            WeekwalkInfo.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 timeThisWeek = 2; */
        if (message.timeThisWeek !== undefined)
            writer.tag(2, WireType.Varint).int32(message.timeThisWeek);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetWeekwalkInfoReply
 */
export const GetWeekwalkInfoReply = new GetWeekwalkInfoReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattleInfo$Type extends MessageType<BattleInfo> {
    constructor() {
        super("BattleInfo", [
            { no: 1, name: "battleId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "star", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "maxStar", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "heroIds", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BattleInfo>): BattleInfo {
        const message = { heroIds: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattleInfo): BattleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 battleId */ 1:
                    message.battleId = reader.int32();
                    break;
                case /* optional int32 star */ 2:
                    message.star = reader.int32();
                    break;
                case /* optional int32 maxStar */ 3:
                    message.maxStar = reader.int32();
                    break;
                case /* int32 heroIds */ 4:
                    message.heroIds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 battleId = 1; */
        if (message.battleId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.battleId);
        /* optional int32 star = 2; */
        if (message.star !== undefined)
            writer.tag(2, WireType.Varint).int32(message.star);
        /* optional int32 maxStar = 3; */
        if (message.maxStar !== undefined)
            writer.tag(3, WireType.Varint).int32(message.maxStar);
        /* int32 heroIds = 4; */
        if (message.heroIds !== 0)
            writer.tag(4, WireType.Varint).int32(message.heroIds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BattleInfo
 */
export const BattleInfo = new BattleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetWeekwalkInfoRequest$Type extends MessageType<GetWeekwalkInfoRequest> {
    constructor() {
        super("GetWeekwalkInfoRequest", []);
    }
    create(value?: PartialMessage<GetWeekwalkInfoRequest>): GetWeekwalkInfoRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetWeekwalkInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetWeekwalkInfoRequest): GetWeekwalkInfoRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetWeekwalkInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetWeekwalkInfoRequest
 */
export const GetWeekwalkInfoRequest = new GetWeekwalkInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkShowFinishedReply$Type extends MessageType<MarkShowFinishedReply> {
    constructor() {
        super("MarkShowFinishedReply", [
            { no: 1, name: "layerId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MarkShowFinishedReply>): MarkShowFinishedReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MarkShowFinishedReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkShowFinishedReply): MarkShowFinishedReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 layerId */ 1:
                    message.layerId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarkShowFinishedReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 layerId = 1; */
        if (message.layerId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.layerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MarkShowFinishedReply
 */
export const MarkShowFinishedReply = new MarkShowFinishedReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MapInfo$Type extends MessageType<MapInfo> {
    constructor() {
        super("MapInfo", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "sceneId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "isFinish", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "isFinished", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "buffId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "isShowBuff", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "isShowFinished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "isShowSelectCd", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "battleInfos", kind: "message", T: () => BattleInfo },
            { no: 10, name: "elementInfos", kind: "message", T: () => WeekwalkElementInfo },
            { no: 11, name: "heroInfos", kind: "message", T: () => WeekwalkHeroInfo },
            { no: 12, name: "storyIds", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MapInfo>): MapInfo {
        const message = { storyIds: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MapInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MapInfo): MapInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* optional int32 sceneId */ 2:
                    message.sceneId = reader.int32();
                    break;
                case /* optional int32 isFinish */ 3:
                    message.isFinish = reader.int32();
                    break;
                case /* optional int32 isFinished */ 4:
                    message.isFinished = reader.int32();
                    break;
                case /* optional int32 buffId */ 5:
                    message.buffId = reader.int32();
                    break;
                case /* optional bool isShowBuff */ 6:
                    message.isShowBuff = reader.bool();
                    break;
                case /* optional bool isShowFinished */ 7:
                    message.isShowFinished = reader.bool();
                    break;
                case /* optional bool isShowSelectCd */ 8:
                    message.isShowSelectCd = reader.bool();
                    break;
                case /* BattleInfo battleInfos */ 9:
                    message.battleInfos = BattleInfo.internalBinaryRead(reader, reader.uint32(), options, message.battleInfos);
                    break;
                case /* WeekwalkElementInfo elementInfos */ 10:
                    message.elementInfos = WeekwalkElementInfo.internalBinaryRead(reader, reader.uint32(), options, message.elementInfos);
                    break;
                case /* WeekwalkHeroInfo heroInfos */ 11:
                    message.heroInfos = WeekwalkHeroInfo.internalBinaryRead(reader, reader.uint32(), options, message.heroInfos);
                    break;
                case /* int32 storyIds */ 12:
                    message.storyIds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MapInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* optional int32 sceneId = 2; */
        if (message.sceneId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.sceneId);
        /* optional int32 isFinish = 3; */
        if (message.isFinish !== undefined)
            writer.tag(3, WireType.Varint).int32(message.isFinish);
        /* optional int32 isFinished = 4; */
        if (message.isFinished !== undefined)
            writer.tag(4, WireType.Varint).int32(message.isFinished);
        /* optional int32 buffId = 5; */
        if (message.buffId !== undefined)
            writer.tag(5, WireType.Varint).int32(message.buffId);
        /* optional bool isShowBuff = 6; */
        if (message.isShowBuff !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isShowBuff);
        /* optional bool isShowFinished = 7; */
        if (message.isShowFinished !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isShowFinished);
        /* optional bool isShowSelectCd = 8; */
        if (message.isShowSelectCd !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isShowSelectCd);
        /* BattleInfo battleInfos = 9; */
        if (message.battleInfos)
            BattleInfo.internalBinaryWrite(message.battleInfos, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* WeekwalkElementInfo elementInfos = 10; */
        if (message.elementInfos)
            WeekwalkElementInfo.internalBinaryWrite(message.elementInfos, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* WeekwalkHeroInfo heroInfos = 11; */
        if (message.heroInfos)
            WeekwalkHeroInfo.internalBinaryWrite(message.heroInfos, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* int32 storyIds = 12; */
        if (message.storyIds !== 0)
            writer.tag(12, WireType.Varint).int32(message.storyIds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MapInfo
 */
export const MapInfo = new MapInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkShowBuffRequest$Type extends MessageType<MarkShowBuffRequest> {
    constructor() {
        super("MarkShowBuffRequest", [
            { no: 1, name: "layerId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MarkShowBuffRequest>): MarkShowBuffRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MarkShowBuffRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkShowBuffRequest): MarkShowBuffRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 layerId */ 1:
                    message.layerId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarkShowBuffRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 layerId = 1; */
        if (message.layerId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.layerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MarkShowBuffRequest
 */
export const MarkShowBuffRequest = new MarkShowBuffRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BeforeStartWeekwalkBattleRequest$Type extends MessageType<BeforeStartWeekwalkBattleRequest> {
    constructor() {
        super("BeforeStartWeekwalkBattleRequest", [
            { no: 1, name: "elementId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "layerId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BeforeStartWeekwalkBattleRequest>): BeforeStartWeekwalkBattleRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BeforeStartWeekwalkBattleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BeforeStartWeekwalkBattleRequest): BeforeStartWeekwalkBattleRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 elementId */ 1:
                    message.elementId = reader.int32();
                    break;
                case /* optional int32 layerId */ 2:
                    message.layerId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BeforeStartWeekwalkBattleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 elementId = 1; */
        if (message.elementId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.elementId);
        /* optional int32 layerId = 2; */
        if (message.layerId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.layerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BeforeStartWeekwalkBattleRequest
 */
export const BeforeStartWeekwalkBattleRequest = new BeforeStartWeekwalkBattleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkPopShallowSettleReply$Type extends MessageType<MarkPopShallowSettleReply> {
    constructor() {
        super("MarkPopShallowSettleReply", []);
    }
    create(value?: PartialMessage<MarkPopShallowSettleReply>): MarkPopShallowSettleReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MarkPopShallowSettleReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkPopShallowSettleReply): MarkPopShallowSettleReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MarkPopShallowSettleReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MarkPopShallowSettleReply
 */
export const MarkPopShallowSettleReply = new MarkPopShallowSettleReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectNotCdHeroReply$Type extends MessageType<SelectNotCdHeroReply> {
    constructor() {
        super("SelectNotCdHeroReply", [
            { no: 1, name: "layerId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "heroId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SelectNotCdHeroReply>): SelectNotCdHeroReply {
        const message = { heroId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SelectNotCdHeroReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectNotCdHeroReply): SelectNotCdHeroReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 layerId */ 1:
                    message.layerId = reader.int32();
                    break;
                case /* int32 heroId */ 2:
                    message.heroId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectNotCdHeroReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 layerId = 1; */
        if (message.layerId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.layerId);
        /* int32 heroId = 2; */
        if (message.heroId !== 0)
            writer.tag(2, WireType.Varint).int32(message.heroId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SelectNotCdHeroReply
 */
export const SelectNotCdHeroReply = new SelectNotCdHeroReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkPopDeepRuleRequest$Type extends MessageType<MarkPopDeepRuleRequest> {
    constructor() {
        super("MarkPopDeepRuleRequest", []);
    }
    create(value?: PartialMessage<MarkPopDeepRuleRequest>): MarkPopDeepRuleRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MarkPopDeepRuleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkPopDeepRuleRequest): MarkPopDeepRuleRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MarkPopDeepRuleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MarkPopDeepRuleRequest
 */
export const MarkPopDeepRuleRequest = new MarkPopDeepRuleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeekwalkHeroRecommendRequest$Type extends MessageType<WeekwalkHeroRecommendRequest> {
    constructor() {
        super("WeekwalkHeroRecommendRequest", [
            { no: 1, name: "elementId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "layerId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WeekwalkHeroRecommendRequest>): WeekwalkHeroRecommendRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeekwalkHeroRecommendRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeekwalkHeroRecommendRequest): WeekwalkHeroRecommendRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 elementId */ 1:
                    message.elementId = reader.int32();
                    break;
                case /* optional int32 layerId */ 2:
                    message.layerId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeekwalkHeroRecommendRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 elementId = 1; */
        if (message.elementId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.elementId);
        /* optional int32 layerId = 2; */
        if (message.layerId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.layerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WeekwalkHeroRecommendRequest
 */
export const WeekwalkHeroRecommendRequest = new WeekwalkHeroRecommendRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeekwalkDialogRequest$Type extends MessageType<WeekwalkDialogRequest> {
    constructor() {
        super("WeekwalkDialogRequest", [
            { no: 1, name: "elementId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "option", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "layerId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WeekwalkDialogRequest>): WeekwalkDialogRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeekwalkDialogRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeekwalkDialogRequest): WeekwalkDialogRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 elementId */ 1:
                    message.elementId = reader.int32();
                    break;
                case /* optional int32 option */ 2:
                    message.option = reader.int32();
                    break;
                case /* optional int32 layerId */ 3:
                    message.layerId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeekwalkDialogRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 elementId = 1; */
        if (message.elementId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.elementId);
        /* optional int32 option = 2; */
        if (message.option !== undefined)
            writer.tag(2, WireType.Varint).int32(message.option);
        /* optional int32 layerId = 3; */
        if (message.layerId !== undefined)
            writer.tag(3, WireType.Varint).int32(message.layerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WeekwalkDialogRequest
 */
export const WeekwalkDialogRequest = new WeekwalkDialogRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkShowFinishedRequest$Type extends MessageType<MarkShowFinishedRequest> {
    constructor() {
        super("MarkShowFinishedRequest", [
            { no: 1, name: "layerId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MarkShowFinishedRequest>): MarkShowFinishedRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MarkShowFinishedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkShowFinishedRequest): MarkShowFinishedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 layerId */ 1:
                    message.layerId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarkShowFinishedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 layerId = 1; */
        if (message.layerId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.layerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MarkShowFinishedRequest
 */
export const MarkShowFinishedRequest = new MarkShowFinishedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkShowBuffReply$Type extends MessageType<MarkShowBuffReply> {
    constructor() {
        super("MarkShowBuffReply", [
            { no: 1, name: "layerId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MarkShowBuffReply>): MarkShowBuffReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MarkShowBuffReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkShowBuffReply): MarkShowBuffReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 layerId */ 1:
                    message.layerId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarkShowBuffReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 layerId = 1; */
        if (message.layerId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.layerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MarkShowBuffReply
 */
export const MarkShowBuffReply = new MarkShowBuffReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeekwalkHeroInfo$Type extends MessageType<WeekwalkHeroInfo> {
    constructor() {
        super("WeekwalkHeroInfo", [
            { no: 1, name: "heroId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "cd", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WeekwalkHeroInfo>): WeekwalkHeroInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeekwalkHeroInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeekwalkHeroInfo): WeekwalkHeroInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 heroId */ 1:
                    message.heroId = reader.int32();
                    break;
                case /* optional int32 cd */ 2:
                    message.cd = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeekwalkHeroInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 heroId = 1; */
        if (message.heroId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.heroId);
        /* optional int32 cd = 2; */
        if (message.cd !== undefined)
            writer.tag(2, WireType.Varint).int32(message.cd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WeekwalkHeroInfo
 */
export const WeekwalkHeroInfo = new WeekwalkHeroInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeekwalkGeneralRequest$Type extends MessageType<WeekwalkGeneralRequest> {
    constructor() {
        super("WeekwalkGeneralRequest", [
            { no: 1, name: "elementId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "layerId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WeekwalkGeneralRequest>): WeekwalkGeneralRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeekwalkGeneralRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeekwalkGeneralRequest): WeekwalkGeneralRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 elementId */ 1:
                    message.elementId = reader.int32();
                    break;
                case /* optional int32 layerId */ 2:
                    message.layerId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeekwalkGeneralRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 elementId = 1; */
        if (message.elementId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.elementId);
        /* optional int32 layerId = 2; */
        if (message.layerId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.layerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WeekwalkGeneralRequest
 */
export const WeekwalkGeneralRequest = new WeekwalkGeneralRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeekwalkDialogReply$Type extends MessageType<WeekwalkDialogReply> {
    constructor() {
        super("WeekwalkDialogReply", [
            { no: 1, name: "elementId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "option", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "layerId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WeekwalkDialogReply>): WeekwalkDialogReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeekwalkDialogReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeekwalkDialogReply): WeekwalkDialogReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 elementId */ 1:
                    message.elementId = reader.int32();
                    break;
                case /* optional int32 option */ 2:
                    message.option = reader.int32();
                    break;
                case /* optional int32 layerId */ 3:
                    message.layerId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeekwalkDialogReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 elementId = 1; */
        if (message.elementId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.elementId);
        /* optional int32 option = 2; */
        if (message.option !== undefined)
            writer.tag(2, WireType.Varint).int32(message.option);
        /* optional int32 layerId = 3; */
        if (message.layerId !== undefined)
            writer.tag(3, WireType.Varint).int32(message.layerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WeekwalkDialogReply
 */
export const WeekwalkDialogReply = new WeekwalkDialogReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkPopShallowSettleRequest$Type extends MessageType<MarkPopShallowSettleRequest> {
    constructor() {
        super("MarkPopShallowSettleRequest", []);
    }
    create(value?: PartialMessage<MarkPopShallowSettleRequest>): MarkPopShallowSettleRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MarkPopShallowSettleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkPopShallowSettleRequest): MarkPopShallowSettleRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MarkPopShallowSettleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MarkPopShallowSettleRequest
 */
export const MarkPopShallowSettleRequest = new MarkPopShallowSettleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectNotCdHeroRequest$Type extends MessageType<SelectNotCdHeroRequest> {
    constructor() {
        super("SelectNotCdHeroRequest", [
            { no: 1, name: "layerId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "heroId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SelectNotCdHeroRequest>): SelectNotCdHeroRequest {
        const message = { heroId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SelectNotCdHeroRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectNotCdHeroRequest): SelectNotCdHeroRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 layerId */ 1:
                    message.layerId = reader.int32();
                    break;
                case /* int32 heroId */ 2:
                    message.heroId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectNotCdHeroRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 layerId = 1; */
        if (message.layerId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.layerId);
        /* int32 heroId = 2; */
        if (message.heroId !== 0)
            writer.tag(2, WireType.Varint).int32(message.heroId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SelectNotCdHeroRequest
 */
export const SelectNotCdHeroRequest = new SelectNotCdHeroRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkPopDeepSettleRequest$Type extends MessageType<MarkPopDeepSettleRequest> {
    constructor() {
        super("MarkPopDeepSettleRequest", []);
    }
    create(value?: PartialMessage<MarkPopDeepSettleRequest>): MarkPopDeepSettleRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MarkPopDeepSettleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkPopDeepSettleRequest): MarkPopDeepSettleRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MarkPopDeepSettleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MarkPopDeepSettleRequest
 */
export const MarkPopDeepSettleRequest = new MarkPopDeepSettleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeekwalkHeroRecommendReply$Type extends MessageType<WeekwalkHeroRecommendReply> {
    constructor() {
        super("WeekwalkHeroRecommendReply", [
            { no: 1, name: "racommends", kind: "message", T: () => EpisodeHeroRecommendInfo }
        ]);
    }
    create(value?: PartialMessage<WeekwalkHeroRecommendReply>): WeekwalkHeroRecommendReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeekwalkHeroRecommendReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeekwalkHeroRecommendReply): WeekwalkHeroRecommendReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* EpisodeHeroRecommendInfo racommends */ 1:
                    message.racommends = EpisodeHeroRecommendInfo.internalBinaryRead(reader, reader.uint32(), options, message.racommends);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeekwalkHeroRecommendReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* EpisodeHeroRecommendInfo racommends = 1; */
        if (message.racommends)
            EpisodeHeroRecommendInfo.internalBinaryWrite(message.racommends, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WeekwalkHeroRecommendReply
 */
export const WeekwalkHeroRecommendReply = new WeekwalkHeroRecommendReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BeforeStartWeekwalkBattleReply$Type extends MessageType<BeforeStartWeekwalkBattleReply> {
    constructor() {
        super("BeforeStartWeekwalkBattleReply", [
            { no: 1, name: "elementId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "layerId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BeforeStartWeekwalkBattleReply>): BeforeStartWeekwalkBattleReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BeforeStartWeekwalkBattleReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BeforeStartWeekwalkBattleReply): BeforeStartWeekwalkBattleReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 elementId */ 1:
                    message.elementId = reader.int32();
                    break;
                case /* optional int32 layerId */ 2:
                    message.layerId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BeforeStartWeekwalkBattleReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 elementId = 1; */
        if (message.elementId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.elementId);
        /* optional int32 layerId = 2; */
        if (message.layerId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.layerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BeforeStartWeekwalkBattleReply
 */
export const BeforeStartWeekwalkBattleReply = new BeforeStartWeekwalkBattleReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeekwalkDialogHistoryRequest$Type extends MessageType<WeekwalkDialogHistoryRequest> {
    constructor() {
        super("WeekwalkDialogHistoryRequest", [
            { no: 1, name: "elementId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "historylist", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "layerId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WeekwalkDialogHistoryRequest>): WeekwalkDialogHistoryRequest {
        const message = { historylist: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeekwalkDialogHistoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeekwalkDialogHistoryRequest): WeekwalkDialogHistoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 elementId */ 1:
                    message.elementId = reader.int32();
                    break;
                case /* string historylist */ 2:
                    message.historylist = reader.string();
                    break;
                case /* optional int32 layerId */ 3:
                    message.layerId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeekwalkDialogHistoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 elementId = 1; */
        if (message.elementId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.elementId);
        /* string historylist = 2; */
        if (message.historylist !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.historylist);
        /* optional int32 layerId = 3; */
        if (message.layerId !== undefined)
            writer.tag(3, WireType.Varint).int32(message.layerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WeekwalkDialogHistoryRequest
 */
export const WeekwalkDialogHistoryRequest = new WeekwalkDialogHistoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeekwalkElementInfo$Type extends MessageType<WeekwalkElementInfo> {
    constructor() {
        super("WeekwalkElementInfo", [
            { no: 1, name: "elementId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "isFinish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "index", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "historylist", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "visible", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<WeekwalkElementInfo>): WeekwalkElementInfo {
        const message = { historylist: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeekwalkElementInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeekwalkElementInfo): WeekwalkElementInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 elementId */ 1:
                    message.elementId = reader.int32();
                    break;
                case /* optional bool isFinish */ 2:
                    message.isFinish = reader.bool();
                    break;
                case /* optional int32 index */ 3:
                    message.index = reader.int32();
                    break;
                case /* string historylist */ 4:
                    message.historylist = reader.string();
                    break;
                case /* optional bool visible */ 5:
                    message.visible = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeekwalkElementInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 elementId = 1; */
        if (message.elementId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.elementId);
        /* optional bool isFinish = 2; */
        if (message.isFinish !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isFinish);
        /* optional int32 index = 3; */
        if (message.index !== undefined)
            writer.tag(3, WireType.Varint).int32(message.index);
        /* string historylist = 4; */
        if (message.historylist !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.historylist);
        /* optional bool visible = 5; */
        if (message.visible !== undefined)
            writer.tag(5, WireType.Varint).bool(message.visible);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WeekwalkElementInfo
 */
export const WeekwalkElementInfo = new WeekwalkElementInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetLayerReply$Type extends MessageType<ResetLayerReply> {
    constructor() {
        super("ResetLayerReply", [
            { no: 1, name: "info", kind: "message", T: () => WeekwalkInfo }
        ]);
    }
    create(value?: PartialMessage<ResetLayerReply>): ResetLayerReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResetLayerReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetLayerReply): ResetLayerReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional WeekwalkInfo info */ 1:
                    message.info = WeekwalkInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetLayerReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional WeekwalkInfo info = 1; */
        if (message.info)
            WeekwalkInfo.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ResetLayerReply
 */
export const ResetLayerReply = new ResetLayerReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeekwalkInfoUpdatePush$Type extends MessageType<WeekwalkInfoUpdatePush> {
    constructor() {
        super("WeekwalkInfoUpdatePush", [
            { no: 1, name: "info", kind: "message", T: () => WeekwalkInfo }
        ]);
    }
    create(value?: PartialMessage<WeekwalkInfoUpdatePush>): WeekwalkInfoUpdatePush {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeekwalkInfoUpdatePush>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeekwalkInfoUpdatePush): WeekwalkInfoUpdatePush {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional WeekwalkInfo info */ 1:
                    message.info = WeekwalkInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeekwalkInfoUpdatePush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional WeekwalkInfo info = 1; */
        if (message.info)
            WeekwalkInfo.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WeekwalkInfoUpdatePush
 */
export const WeekwalkInfoUpdatePush = new WeekwalkInfoUpdatePush$Type();
