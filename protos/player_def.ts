// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "player_def.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { HeroSimpleInfo } from "./hero_def";
/**
 * @generated from protobuf message SimplePlayerInfo
 */
export interface SimplePlayerInfo {
    /**
     * @generated from protobuf field: optional uint64 userId = 1;
     */
    userId?: bigint;
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional int32 portrait = 3;
     */
    portrait?: number;
    /**
     * @generated from protobuf field: optional int32 level = 4;
     */
    level?: number;
    /**
     * @generated from protobuf field: optional bool isOnline = 5;
     */
    isOnline?: boolean;
    /**
     * @generated from protobuf field: optional int32 zoneId = 6;
     */
    zoneId?: number;
    /**
     * @generated from protobuf field: optional int32 datetime = 7;
     */
    datetime?: number;
}
/**
 * @generated from protobuf message PlayerCloth
 */
export interface PlayerCloth {
    /**
     * @generated from protobuf field: optional int32 clothId = 1;
     */
    clothId?: number;
    /**
     * @generated from protobuf field: optional int32 level = 2;
     */
    level?: number;
    /**
     * @generated from protobuf field: optional int32 exp = 3;
     */
    exp?: number;
}
/**
 * @generated from protobuf message PlayerInfo
 */
export interface PlayerInfo {
    /**
     * @generated from protobuf field: optional uint64 userId = 1;
     */
    userId?: bigint;
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional int32 portrait = 3;
     */
    portrait?: number;
    /**
     * @generated from protobuf field: optional int32 level = 4;
     */
    level?: number;
    /**
     * @generated from protobuf field: optional int32 exp = 5;
     */
    exp?: number;
    /**
     * @generated from protobuf field: optional string signature = 6;
     */
    signature?: string;
    /**
     * @generated from protobuf field: optional string birthday = 7;
     */
    birthday?: string;
    /**
     * @generated from protobuf field: HeroSimpleInfo showHeros = 8;
     */
    showHeros?: HeroSimpleInfo;
    /**
     * @generated from protobuf field: optional int64 registerTime = 9;
     */
    registerTime?: bigint;
    /**
     * @generated from protobuf field: optional int32 heroRareNNCount = 10;
     */
    heroRareNNCount?: number;
    /**
     * @generated from protobuf field: optional int32 heroRareNCount = 11;
     */
    heroRareNCount?: number;
    /**
     * @generated from protobuf field: optional int32 heroRareRCount = 12;
     */
    heroRareRCount?: number;
    /**
     * @generated from protobuf field: optional int32 heroRareSRCount = 13;
     */
    heroRareSRCount?: number;
    /**
     * @generated from protobuf field: optional int32 heroRareSSRCount = 14;
     */
    heroRareSSRCount?: number;
    /**
     * @generated from protobuf field: optional int32 lastEpisodeId = 15;
     */
    lastEpisodeId?: number;
    /**
     * @generated from protobuf field: optional int64 lastLoginTime = 16;
     */
    lastLoginTime?: bigint;
    /**
     * @generated from protobuf field: optional int64 lastLogoutTime = 17;
     */
    lastLogoutTime?: bigint;
    /**
     * @generated from protobuf field: int32 characterAge = 18;
     */
    characterAge: number;
}
/**
 * @generated from protobuf message PlayerClothInfo
 */
export interface PlayerClothInfo {
    /**
     * @generated from protobuf field: PlayerCloth clothes = 1;
     */
    clothes?: PlayerCloth;
}
// @generated message type with reflection information, may provide speed optimized methods
class SimplePlayerInfo$Type extends MessageType<SimplePlayerInfo> {
    constructor() {
        super("SimplePlayerInfo", [
            { no: 1, name: "userId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "portrait", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "level", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "isOnline", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "zoneId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "datetime", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SimplePlayerInfo>): SimplePlayerInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SimplePlayerInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimplePlayerInfo): SimplePlayerInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 userId */ 1:
                    message.userId = reader.uint64().toBigInt();
                    break;
                case /* optional string name */ 2:
                    message.name = reader.string();
                    break;
                case /* optional int32 portrait */ 3:
                    message.portrait = reader.int32();
                    break;
                case /* optional int32 level */ 4:
                    message.level = reader.int32();
                    break;
                case /* optional bool isOnline */ 5:
                    message.isOnline = reader.bool();
                    break;
                case /* optional int32 zoneId */ 6:
                    message.zoneId = reader.int32();
                    break;
                case /* optional int32 datetime */ 7:
                    message.datetime = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimplePlayerInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 userId = 1; */
        if (message.userId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.userId);
        /* optional string name = 2; */
        if (message.name !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* optional int32 portrait = 3; */
        if (message.portrait !== undefined)
            writer.tag(3, WireType.Varint).int32(message.portrait);
        /* optional int32 level = 4; */
        if (message.level !== undefined)
            writer.tag(4, WireType.Varint).int32(message.level);
        /* optional bool isOnline = 5; */
        if (message.isOnline !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isOnline);
        /* optional int32 zoneId = 6; */
        if (message.zoneId !== undefined)
            writer.tag(6, WireType.Varint).int32(message.zoneId);
        /* optional int32 datetime = 7; */
        if (message.datetime !== undefined)
            writer.tag(7, WireType.Varint).int32(message.datetime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SimplePlayerInfo
 */
export const SimplePlayerInfo = new SimplePlayerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerCloth$Type extends MessageType<PlayerCloth> {
    constructor() {
        super("PlayerCloth", [
            { no: 1, name: "clothId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "level", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "exp", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerCloth>): PlayerCloth {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerCloth>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerCloth): PlayerCloth {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 clothId */ 1:
                    message.clothId = reader.int32();
                    break;
                case /* optional int32 level */ 2:
                    message.level = reader.int32();
                    break;
                case /* optional int32 exp */ 3:
                    message.exp = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerCloth, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 clothId = 1; */
        if (message.clothId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.clothId);
        /* optional int32 level = 2; */
        if (message.level !== undefined)
            writer.tag(2, WireType.Varint).int32(message.level);
        /* optional int32 exp = 3; */
        if (message.exp !== undefined)
            writer.tag(3, WireType.Varint).int32(message.exp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerCloth
 */
export const PlayerCloth = new PlayerCloth$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerInfo$Type extends MessageType<PlayerInfo> {
    constructor() {
        super("PlayerInfo", [
            { no: 1, name: "userId", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "portrait", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "level", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "exp", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "signature", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "birthday", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "showHeros", kind: "message", T: () => HeroSimpleInfo },
            { no: 9, name: "registerTime", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "heroRareNNCount", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "heroRareNCount", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "heroRareRCount", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "heroRareSRCount", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "heroRareSSRCount", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "lastEpisodeId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "lastLoginTime", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "lastLogoutTime", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "characterAge", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerInfo>): PlayerInfo {
        const message = { characterAge: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerInfo): PlayerInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 userId */ 1:
                    message.userId = reader.uint64().toBigInt();
                    break;
                case /* optional string name */ 2:
                    message.name = reader.string();
                    break;
                case /* optional int32 portrait */ 3:
                    message.portrait = reader.int32();
                    break;
                case /* optional int32 level */ 4:
                    message.level = reader.int32();
                    break;
                case /* optional int32 exp */ 5:
                    message.exp = reader.int32();
                    break;
                case /* optional string signature */ 6:
                    message.signature = reader.string();
                    break;
                case /* optional string birthday */ 7:
                    message.birthday = reader.string();
                    break;
                case /* HeroSimpleInfo showHeros */ 8:
                    message.showHeros = HeroSimpleInfo.internalBinaryRead(reader, reader.uint32(), options, message.showHeros);
                    break;
                case /* optional int64 registerTime */ 9:
                    message.registerTime = reader.int64().toBigInt();
                    break;
                case /* optional int32 heroRareNNCount */ 10:
                    message.heroRareNNCount = reader.int32();
                    break;
                case /* optional int32 heroRareNCount */ 11:
                    message.heroRareNCount = reader.int32();
                    break;
                case /* optional int32 heroRareRCount */ 12:
                    message.heroRareRCount = reader.int32();
                    break;
                case /* optional int32 heroRareSRCount */ 13:
                    message.heroRareSRCount = reader.int32();
                    break;
                case /* optional int32 heroRareSSRCount */ 14:
                    message.heroRareSSRCount = reader.int32();
                    break;
                case /* optional int32 lastEpisodeId */ 15:
                    message.lastEpisodeId = reader.int32();
                    break;
                case /* optional int64 lastLoginTime */ 16:
                    message.lastLoginTime = reader.int64().toBigInt();
                    break;
                case /* optional int64 lastLogoutTime */ 17:
                    message.lastLogoutTime = reader.int64().toBigInt();
                    break;
                case /* int32 characterAge */ 18:
                    message.characterAge = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 userId = 1; */
        if (message.userId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.userId);
        /* optional string name = 2; */
        if (message.name !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* optional int32 portrait = 3; */
        if (message.portrait !== undefined)
            writer.tag(3, WireType.Varint).int32(message.portrait);
        /* optional int32 level = 4; */
        if (message.level !== undefined)
            writer.tag(4, WireType.Varint).int32(message.level);
        /* optional int32 exp = 5; */
        if (message.exp !== undefined)
            writer.tag(5, WireType.Varint).int32(message.exp);
        /* optional string signature = 6; */
        if (message.signature !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.signature);
        /* optional string birthday = 7; */
        if (message.birthday !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.birthday);
        /* HeroSimpleInfo showHeros = 8; */
        if (message.showHeros)
            HeroSimpleInfo.internalBinaryWrite(message.showHeros, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional int64 registerTime = 9; */
        if (message.registerTime !== undefined)
            writer.tag(9, WireType.Varint).int64(message.registerTime);
        /* optional int32 heroRareNNCount = 10; */
        if (message.heroRareNNCount !== undefined)
            writer.tag(10, WireType.Varint).int32(message.heroRareNNCount);
        /* optional int32 heroRareNCount = 11; */
        if (message.heroRareNCount !== undefined)
            writer.tag(11, WireType.Varint).int32(message.heroRareNCount);
        /* optional int32 heroRareRCount = 12; */
        if (message.heroRareRCount !== undefined)
            writer.tag(12, WireType.Varint).int32(message.heroRareRCount);
        /* optional int32 heroRareSRCount = 13; */
        if (message.heroRareSRCount !== undefined)
            writer.tag(13, WireType.Varint).int32(message.heroRareSRCount);
        /* optional int32 heroRareSSRCount = 14; */
        if (message.heroRareSSRCount !== undefined)
            writer.tag(14, WireType.Varint).int32(message.heroRareSSRCount);
        /* optional int32 lastEpisodeId = 15; */
        if (message.lastEpisodeId !== undefined)
            writer.tag(15, WireType.Varint).int32(message.lastEpisodeId);
        /* optional int64 lastLoginTime = 16; */
        if (message.lastLoginTime !== undefined)
            writer.tag(16, WireType.Varint).int64(message.lastLoginTime);
        /* optional int64 lastLogoutTime = 17; */
        if (message.lastLogoutTime !== undefined)
            writer.tag(17, WireType.Varint).int64(message.lastLogoutTime);
        /* int32 characterAge = 18; */
        if (message.characterAge !== 0)
            writer.tag(18, WireType.Varint).int32(message.characterAge);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerInfo
 */
export const PlayerInfo = new PlayerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerClothInfo$Type extends MessageType<PlayerClothInfo> {
    constructor() {
        super("PlayerClothInfo", [
            { no: 1, name: "clothes", kind: "message", T: () => PlayerCloth }
        ]);
    }
    create(value?: PartialMessage<PlayerClothInfo>): PlayerClothInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerClothInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerClothInfo): PlayerClothInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PlayerCloth clothes */ 1:
                    message.clothes = PlayerCloth.internalBinaryRead(reader, reader.uint32(), options, message.clothes);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerClothInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PlayerCloth clothes = 1; */
        if (message.clothes)
            PlayerCloth.internalBinaryWrite(message.clothes, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerClothInfo
 */
export const PlayerClothInfo = new PlayerClothInfo$Type();
