// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "story_module.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message GetStoryFinishRequest
 */
export interface GetStoryFinishRequest {
    /**
     * @generated from protobuf field: optional int32 storyId = 1;
     */
    storyId?: number;
}
/**
 * @generated from protobuf message ProcessingStoryInfo
 */
export interface ProcessingStoryInfo {
    /**
     * @generated from protobuf field: optional int32 storyId = 1;
     */
    storyId?: number;
    /**
     * @generated from protobuf field: optional int32 stepId = 2;
     */
    stepId?: number;
    /**
     * @generated from protobuf field: optional int32 favor = 3;
     */
    favor?: number;
}
/**
 * @generated from protobuf message UpdateStoryRequest
 */
export interface UpdateStoryRequest {
    /**
     * @generated from protobuf field: optional int32 storyId = 1;
     */
    storyId?: number;
    /**
     * @generated from protobuf field: optional int32 stepId = 2;
     */
    stepId?: number;
    /**
     * @generated from protobuf field: optional int32 favor = 3;
     */
    favor?: number;
}
/**
 * @generated from protobuf message GetStoryFinishReply
 */
export interface GetStoryFinishReply {
    /**
     * @generated from protobuf field: optional bool isFinish = 1;
     */
    isFinish?: boolean;
}
/**
 * @generated from protobuf message UpdateStoryReply
 */
export interface UpdateStoryReply {
}
/**
 * @generated from protobuf message GetStoryRequest
 */
export interface GetStoryRequest {
}
/**
 * @generated from protobuf message StoryFinishPush
 */
export interface StoryFinishPush {
    /**
     * @generated from protobuf field: optional int32 storyId = 1;
     */
    storyId?: number;
}
/**
 * @generated from protobuf message GetStoryReply
 */
export interface GetStoryReply {
    /**
     * @generated from protobuf field: repeated int32 finishList = 1;
     */
    finishList: number[];
    /**
     * @generated from protobuf field: repeated ProcessingStoryInfo processingList = 2;
     */
    processingList: ProcessingStoryInfo[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GetStoryFinishRequest$Type extends MessageType<GetStoryFinishRequest> {
    constructor() {
        super("GetStoryFinishRequest", [
            { no: 1, name: "storyId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetStoryFinishRequest>): GetStoryFinishRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetStoryFinishRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStoryFinishRequest): GetStoryFinishRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 storyId */ 1:
                    message.storyId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetStoryFinishRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 storyId = 1; */
        if (message.storyId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.storyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetStoryFinishRequest
 */
export const GetStoryFinishRequest = new GetStoryFinishRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProcessingStoryInfo$Type extends MessageType<ProcessingStoryInfo> {
    constructor() {
        super("ProcessingStoryInfo", [
            { no: 1, name: "storyId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "stepId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "favor", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ProcessingStoryInfo>): ProcessingStoryInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProcessingStoryInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProcessingStoryInfo): ProcessingStoryInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 storyId */ 1:
                    message.storyId = reader.int32();
                    break;
                case /* optional int32 stepId */ 2:
                    message.stepId = reader.int32();
                    break;
                case /* optional int32 favor */ 3:
                    message.favor = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProcessingStoryInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 storyId = 1; */
        if (message.storyId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.storyId);
        /* optional int32 stepId = 2; */
        if (message.stepId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.stepId);
        /* optional int32 favor = 3; */
        if (message.favor !== undefined)
            writer.tag(3, WireType.Varint).int32(message.favor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ProcessingStoryInfo
 */
export const ProcessingStoryInfo = new ProcessingStoryInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateStoryRequest$Type extends MessageType<UpdateStoryRequest> {
    constructor() {
        super("UpdateStoryRequest", [
            { no: 1, name: "storyId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "stepId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "favor", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateStoryRequest>): UpdateStoryRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateStoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateStoryRequest): UpdateStoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 storyId */ 1:
                    message.storyId = reader.int32();
                    break;
                case /* optional int32 stepId */ 2:
                    message.stepId = reader.int32();
                    break;
                case /* optional int32 favor */ 3:
                    message.favor = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateStoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 storyId = 1; */
        if (message.storyId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.storyId);
        /* optional int32 stepId = 2; */
        if (message.stepId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.stepId);
        /* optional int32 favor = 3; */
        if (message.favor !== undefined)
            writer.tag(3, WireType.Varint).int32(message.favor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateStoryRequest
 */
export const UpdateStoryRequest = new UpdateStoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetStoryFinishReply$Type extends MessageType<GetStoryFinishReply> {
    constructor() {
        super("GetStoryFinishReply", [
            { no: 1, name: "isFinish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetStoryFinishReply>): GetStoryFinishReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetStoryFinishReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStoryFinishReply): GetStoryFinishReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool isFinish */ 1:
                    message.isFinish = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetStoryFinishReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool isFinish = 1; */
        if (message.isFinish !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isFinish);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetStoryFinishReply
 */
export const GetStoryFinishReply = new GetStoryFinishReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateStoryReply$Type extends MessageType<UpdateStoryReply> {
    constructor() {
        super("UpdateStoryReply", []);
    }
    create(value?: PartialMessage<UpdateStoryReply>): UpdateStoryReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateStoryReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateStoryReply): UpdateStoryReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateStoryReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateStoryReply
 */
export const UpdateStoryReply = new UpdateStoryReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetStoryRequest$Type extends MessageType<GetStoryRequest> {
    constructor() {
        super("GetStoryRequest", []);
    }
    create(value?: PartialMessage<GetStoryRequest>): GetStoryRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetStoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStoryRequest): GetStoryRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetStoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetStoryRequest
 */
export const GetStoryRequest = new GetStoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoryFinishPush$Type extends MessageType<StoryFinishPush> {
    constructor() {
        super("StoryFinishPush", [
            { no: 1, name: "storyId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StoryFinishPush>): StoryFinishPush {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoryFinishPush>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoryFinishPush): StoryFinishPush {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 storyId */ 1:
                    message.storyId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoryFinishPush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 storyId = 1; */
        if (message.storyId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.storyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoryFinishPush
 */
export const StoryFinishPush = new StoryFinishPush$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetStoryReply$Type extends MessageType<GetStoryReply> {
    constructor() {
        super("GetStoryReply", [
            { no: 1, name: "finishList", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "processingList", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ProcessingStoryInfo }
        ]);
    }
    create(value?: PartialMessage<GetStoryReply>): GetStoryReply {
        const message = { finishList: [], processingList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetStoryReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStoryReply): GetStoryReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 finishList */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishList.push(reader.int32());
                    else
                        message.finishList.push(reader.int32());
                    break;
                case /* repeated ProcessingStoryInfo processingList */ 2:
                    message.processingList.push(ProcessingStoryInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetStoryReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 finishList = 1; */
        for (let i = 0; i < message.finishList.length; i++)
            writer.tag(1, WireType.Varint).int32(message.finishList[i]);
        /* repeated ProcessingStoryInfo processingList = 2; */
        for (let i = 0; i < message.processingList.length; i++)
            ProcessingStoryInfo.internalBinaryWrite(message.processingList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetStoryReply
 */
export const GetStoryReply = new GetStoryReply$Type();
