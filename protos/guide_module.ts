// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "guide_module.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message GetGuideInfoReply
 */
export interface GetGuideInfoReply {
    /**
     * @generated from protobuf field: repeated GuideInfo guideInfos = 1;
     */
    guideInfos: GuideInfo[];
}
/**
 * @generated from protobuf message GuideInfo
 */
export interface GuideInfo {
    /**
     * @generated from protobuf field: int32 guideId = 1;
     */
    guideId: number;
    /**
     * @generated from protobuf field: int32 stepId = 2;
     */
    stepId: number;
}
/**
 * @generated from protobuf message UpdateGuidePush
 */
export interface UpdateGuidePush {
    /**
     * @generated from protobuf field: repeated GuideInfo guideInfos = 1;
     */
    guideInfos: GuideInfo[];
}
/**
 * @generated from protobuf message FinishGuideReply
 */
export interface FinishGuideReply {
}
/**
 * @generated from protobuf message FinishGuideRequest
 */
export interface FinishGuideRequest {
    /**
     * @generated from protobuf field: int32 guideId = 1;
     */
    guideId: number;
    /**
     * @generated from protobuf field: int32 stepId = 2;
     */
    stepId: number;
}
/**
 * @generated from protobuf message GetGuideInfoRequest
 */
export interface GetGuideInfoRequest {
}
// @generated message type with reflection information, may provide speed optimized methods
class GetGuideInfoReply$Type extends MessageType<GetGuideInfoReply> {
    constructor() {
        super("GetGuideInfoReply", [
            { no: 1, name: "guideInfos", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GuideInfo }
        ]);
    }
    create(value?: PartialMessage<GetGuideInfoReply>): GetGuideInfoReply {
        const message = { guideInfos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetGuideInfoReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGuideInfoReply): GetGuideInfoReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated GuideInfo guideInfos */ 1:
                    message.guideInfos.push(GuideInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGuideInfoReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated GuideInfo guideInfos = 1; */
        for (let i = 0; i < message.guideInfos.length; i++)
            GuideInfo.internalBinaryWrite(message.guideInfos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetGuideInfoReply
 */
export const GetGuideInfoReply = new GetGuideInfoReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GuideInfo$Type extends MessageType<GuideInfo> {
    constructor() {
        super("GuideInfo", [
            { no: 1, name: "guideId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "stepId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GuideInfo>): GuideInfo {
        const message = { guideId: 0, stepId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GuideInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GuideInfo): GuideInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 guideId */ 1:
                    message.guideId = reader.int32();
                    break;
                case /* int32 stepId */ 2:
                    message.stepId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GuideInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 guideId = 1; */
        if (message.guideId !== 0)
            writer.tag(1, WireType.Varint).int32(message.guideId);
        /* int32 stepId = 2; */
        if (message.stepId !== 0)
            writer.tag(2, WireType.Varint).int32(message.stepId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GuideInfo
 */
export const GuideInfo = new GuideInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateGuidePush$Type extends MessageType<UpdateGuidePush> {
    constructor() {
        super("UpdateGuidePush", [
            { no: 1, name: "guideInfos", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GuideInfo }
        ]);
    }
    create(value?: PartialMessage<UpdateGuidePush>): UpdateGuidePush {
        const message = { guideInfos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateGuidePush>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateGuidePush): UpdateGuidePush {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated GuideInfo guideInfos */ 1:
                    message.guideInfos.push(GuideInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateGuidePush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated GuideInfo guideInfos = 1; */
        for (let i = 0; i < message.guideInfos.length; i++)
            GuideInfo.internalBinaryWrite(message.guideInfos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateGuidePush
 */
export const UpdateGuidePush = new UpdateGuidePush$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishGuideReply$Type extends MessageType<FinishGuideReply> {
    constructor() {
        super("FinishGuideReply", []);
    }
    create(value?: PartialMessage<FinishGuideReply>): FinishGuideReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FinishGuideReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishGuideReply): FinishGuideReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: FinishGuideReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FinishGuideReply
 */
export const FinishGuideReply = new FinishGuideReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishGuideRequest$Type extends MessageType<FinishGuideRequest> {
    constructor() {
        super("FinishGuideRequest", [
            { no: 1, name: "guideId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "stepId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FinishGuideRequest>): FinishGuideRequest {
        const message = { guideId: 0, stepId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FinishGuideRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishGuideRequest): FinishGuideRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 guideId */ 1:
                    message.guideId = reader.int32();
                    break;
                case /* int32 stepId */ 2:
                    message.stepId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinishGuideRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 guideId = 1; */
        if (message.guideId !== 0)
            writer.tag(1, WireType.Varint).int32(message.guideId);
        /* int32 stepId = 2; */
        if (message.stepId !== 0)
            writer.tag(2, WireType.Varint).int32(message.stepId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FinishGuideRequest
 */
export const FinishGuideRequest = new FinishGuideRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGuideInfoRequest$Type extends MessageType<GetGuideInfoRequest> {
    constructor() {
        super("GetGuideInfoRequest", []);
    }
    create(value?: PartialMessage<GetGuideInfoRequest>): GetGuideInfoRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetGuideInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGuideInfoRequest): GetGuideInfoRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetGuideInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetGuideInfoRequest
 */
export const GetGuideInfoRequest = new GetGuideInfoRequest$Type();
