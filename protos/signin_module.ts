// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "signin_module.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message SignInAddupReply
 */
export interface SignInAddupReply {
    /**
     * @generated from protobuf field: optional int32 id = 1;
     */
    id?: number;
}
/**
 * @generated from protobuf message SignInHistoryRequest
 */
export interface SignInHistoryRequest {
    /**
     * @generated from protobuf field: optional int32 month = 1;
     */
    month?: number;
}
/**
 * @generated from protobuf message GetHeroBirthdayRequest
 */
export interface GetHeroBirthdayRequest {
    /**
     * @generated from protobuf field: optional int32 heroId = 1;
     */
    heroId?: number;
}
/**
 * @generated from protobuf message GetHeroBirthdayReply
 */
export interface GetHeroBirthdayReply {
    /**
     * @generated from protobuf field: optional int32 heroId = 1;
     */
    heroId?: number;
}
/**
 * @generated from protobuf message SignInReply
 */
export interface SignInReply {
    /**
     * @generated from protobuf field: optional int32 day = 1;
     */
    day?: number;
    /**
     * @generated from protobuf field: int32 birthdayHeroIds = 2;
     */
    birthdayHeroIds: number;
}
/**
 * @generated from protobuf message GetSignInInfoReply
 */
export interface GetSignInInfoReply {
    /**
     * @generated from protobuf field: int32 hasSignInDays = 1;
     */
    hasSignInDays: number;
    /**
     * @generated from protobuf field: optional int32 addupSignInDay = 2;
     */
    addupSignInDay?: number;
    /**
     * @generated from protobuf field: int32 hasGetAddupBonus = 3;
     */
    hasGetAddupBonus: number;
    /**
     * @generated from protobuf field: optional int32 openFunctionTime = 4;
     */
    openFunctionTime?: number;
    /**
     * @generated from protobuf field: int32 hasMonthCardDays = 5;
     */
    hasMonthCardDays: number;
    /**
     * @generated from protobuf field: MonthCardHistory monthCardHistory = 6;
     */
    monthCardHistory?: MonthCardHistory;
    /**
     * @generated from protobuf field: int32 birthdayHeroIds = 7;
     */
    birthdayHeroIds: number;
}
/**
 * @generated from protobuf message MonthCardHistory
 */
export interface MonthCardHistory {
    /**
     * @generated from protobuf field: optional int32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional int32 startTime = 2;
     */
    startTime?: number;
    /**
     * @generated from protobuf field: optional int32 endTime = 3;
     */
    endTime?: number;
}
/**
 * @generated from protobuf message SignInRequest
 */
export interface SignInRequest {
}
/**
 * @generated from protobuf message SignInAddupRequest
 */
export interface SignInAddupRequest {
    /**
     * @generated from protobuf field: optional int32 id = 1;
     */
    id?: number;
}
/**
 * @generated from protobuf message SignInHistoryReply
 */
export interface SignInHistoryReply {
    /**
     * @generated from protobuf field: optional int32 month = 1;
     */
    month?: number;
    /**
     * @generated from protobuf field: int32 hasSignInDays = 2;
     */
    hasSignInDays: number;
    /**
     * @generated from protobuf field: int32 hasMonthCardDays = 3;
     */
    hasMonthCardDays: number;
    /**
     * @generated from protobuf field: int32 birthdayHeroIds = 4;
     */
    birthdayHeroIds: number;
}
/**
 * @generated from protobuf message GetSignInInfoRequest
 */
export interface GetSignInInfoRequest {
}
// @generated message type with reflection information, may provide speed optimized methods
class SignInAddupReply$Type extends MessageType<SignInAddupReply> {
    constructor() {
        super("SignInAddupReply", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SignInAddupReply>): SignInAddupReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignInAddupReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignInAddupReply): SignInAddupReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignInAddupReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SignInAddupReply
 */
export const SignInAddupReply = new SignInAddupReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignInHistoryRequest$Type extends MessageType<SignInHistoryRequest> {
    constructor() {
        super("SignInHistoryRequest", [
            { no: 1, name: "month", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SignInHistoryRequest>): SignInHistoryRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignInHistoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignInHistoryRequest): SignInHistoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 month */ 1:
                    message.month = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignInHistoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 month = 1; */
        if (message.month !== undefined)
            writer.tag(1, WireType.Varint).int32(message.month);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SignInHistoryRequest
 */
export const SignInHistoryRequest = new SignInHistoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetHeroBirthdayRequest$Type extends MessageType<GetHeroBirthdayRequest> {
    constructor() {
        super("GetHeroBirthdayRequest", [
            { no: 1, name: "heroId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetHeroBirthdayRequest>): GetHeroBirthdayRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetHeroBirthdayRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetHeroBirthdayRequest): GetHeroBirthdayRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 heroId */ 1:
                    message.heroId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetHeroBirthdayRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 heroId = 1; */
        if (message.heroId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.heroId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetHeroBirthdayRequest
 */
export const GetHeroBirthdayRequest = new GetHeroBirthdayRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetHeroBirthdayReply$Type extends MessageType<GetHeroBirthdayReply> {
    constructor() {
        super("GetHeroBirthdayReply", [
            { no: 1, name: "heroId", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetHeroBirthdayReply>): GetHeroBirthdayReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetHeroBirthdayReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetHeroBirthdayReply): GetHeroBirthdayReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 heroId */ 1:
                    message.heroId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetHeroBirthdayReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 heroId = 1; */
        if (message.heroId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.heroId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetHeroBirthdayReply
 */
export const GetHeroBirthdayReply = new GetHeroBirthdayReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignInReply$Type extends MessageType<SignInReply> {
    constructor() {
        super("SignInReply", [
            { no: 1, name: "day", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "birthdayHeroIds", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SignInReply>): SignInReply {
        const message = { birthdayHeroIds: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignInReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignInReply): SignInReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 day */ 1:
                    message.day = reader.int32();
                    break;
                case /* int32 birthdayHeroIds */ 2:
                    message.birthdayHeroIds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignInReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 day = 1; */
        if (message.day !== undefined)
            writer.tag(1, WireType.Varint).int32(message.day);
        /* int32 birthdayHeroIds = 2; */
        if (message.birthdayHeroIds !== 0)
            writer.tag(2, WireType.Varint).int32(message.birthdayHeroIds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SignInReply
 */
export const SignInReply = new SignInReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSignInInfoReply$Type extends MessageType<GetSignInInfoReply> {
    constructor() {
        super("GetSignInInfoReply", [
            { no: 1, name: "hasSignInDays", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "addupSignInDay", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "hasGetAddupBonus", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "openFunctionTime", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "hasMonthCardDays", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "monthCardHistory", kind: "message", T: () => MonthCardHistory },
            { no: 7, name: "birthdayHeroIds", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetSignInInfoReply>): GetSignInInfoReply {
        const message = { hasSignInDays: 0, hasGetAddupBonus: 0, hasMonthCardDays: 0, birthdayHeroIds: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSignInInfoReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSignInInfoReply): GetSignInInfoReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 hasSignInDays */ 1:
                    message.hasSignInDays = reader.int32();
                    break;
                case /* optional int32 addupSignInDay */ 2:
                    message.addupSignInDay = reader.int32();
                    break;
                case /* int32 hasGetAddupBonus */ 3:
                    message.hasGetAddupBonus = reader.int32();
                    break;
                case /* optional int32 openFunctionTime */ 4:
                    message.openFunctionTime = reader.int32();
                    break;
                case /* int32 hasMonthCardDays */ 5:
                    message.hasMonthCardDays = reader.int32();
                    break;
                case /* MonthCardHistory monthCardHistory */ 6:
                    message.monthCardHistory = MonthCardHistory.internalBinaryRead(reader, reader.uint32(), options, message.monthCardHistory);
                    break;
                case /* int32 birthdayHeroIds */ 7:
                    message.birthdayHeroIds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSignInInfoReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 hasSignInDays = 1; */
        if (message.hasSignInDays !== 0)
            writer.tag(1, WireType.Varint).int32(message.hasSignInDays);
        /* optional int32 addupSignInDay = 2; */
        if (message.addupSignInDay !== undefined)
            writer.tag(2, WireType.Varint).int32(message.addupSignInDay);
        /* int32 hasGetAddupBonus = 3; */
        if (message.hasGetAddupBonus !== 0)
            writer.tag(3, WireType.Varint).int32(message.hasGetAddupBonus);
        /* optional int32 openFunctionTime = 4; */
        if (message.openFunctionTime !== undefined)
            writer.tag(4, WireType.Varint).int32(message.openFunctionTime);
        /* int32 hasMonthCardDays = 5; */
        if (message.hasMonthCardDays !== 0)
            writer.tag(5, WireType.Varint).int32(message.hasMonthCardDays);
        /* MonthCardHistory monthCardHistory = 6; */
        if (message.monthCardHistory)
            MonthCardHistory.internalBinaryWrite(message.monthCardHistory, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int32 birthdayHeroIds = 7; */
        if (message.birthdayHeroIds !== 0)
            writer.tag(7, WireType.Varint).int32(message.birthdayHeroIds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetSignInInfoReply
 */
export const GetSignInInfoReply = new GetSignInInfoReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MonthCardHistory$Type extends MessageType<MonthCardHistory> {
    constructor() {
        super("MonthCardHistory", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "startTime", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "endTime", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MonthCardHistory>): MonthCardHistory {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MonthCardHistory>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MonthCardHistory): MonthCardHistory {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* optional int32 startTime */ 2:
                    message.startTime = reader.int32();
                    break;
                case /* optional int32 endTime */ 3:
                    message.endTime = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MonthCardHistory, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* optional int32 startTime = 2; */
        if (message.startTime !== undefined)
            writer.tag(2, WireType.Varint).int32(message.startTime);
        /* optional int32 endTime = 3; */
        if (message.endTime !== undefined)
            writer.tag(3, WireType.Varint).int32(message.endTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MonthCardHistory
 */
export const MonthCardHistory = new MonthCardHistory$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignInRequest$Type extends MessageType<SignInRequest> {
    constructor() {
        super("SignInRequest", []);
    }
    create(value?: PartialMessage<SignInRequest>): SignInRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignInRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignInRequest): SignInRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SignInRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SignInRequest
 */
export const SignInRequest = new SignInRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignInAddupRequest$Type extends MessageType<SignInAddupRequest> {
    constructor() {
        super("SignInAddupRequest", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SignInAddupRequest>): SignInAddupRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignInAddupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignInAddupRequest): SignInAddupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignInAddupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SignInAddupRequest
 */
export const SignInAddupRequest = new SignInAddupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignInHistoryReply$Type extends MessageType<SignInHistoryReply> {
    constructor() {
        super("SignInHistoryReply", [
            { no: 1, name: "month", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "hasSignInDays", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "hasMonthCardDays", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "birthdayHeroIds", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SignInHistoryReply>): SignInHistoryReply {
        const message = { hasSignInDays: 0, hasMonthCardDays: 0, birthdayHeroIds: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignInHistoryReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignInHistoryReply): SignInHistoryReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 month */ 1:
                    message.month = reader.int32();
                    break;
                case /* int32 hasSignInDays */ 2:
                    message.hasSignInDays = reader.int32();
                    break;
                case /* int32 hasMonthCardDays */ 3:
                    message.hasMonthCardDays = reader.int32();
                    break;
                case /* int32 birthdayHeroIds */ 4:
                    message.birthdayHeroIds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignInHistoryReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 month = 1; */
        if (message.month !== undefined)
            writer.tag(1, WireType.Varint).int32(message.month);
        /* int32 hasSignInDays = 2; */
        if (message.hasSignInDays !== 0)
            writer.tag(2, WireType.Varint).int32(message.hasSignInDays);
        /* int32 hasMonthCardDays = 3; */
        if (message.hasMonthCardDays !== 0)
            writer.tag(3, WireType.Varint).int32(message.hasMonthCardDays);
        /* int32 birthdayHeroIds = 4; */
        if (message.birthdayHeroIds !== 0)
            writer.tag(4, WireType.Varint).int32(message.birthdayHeroIds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SignInHistoryReply
 */
export const SignInHistoryReply = new SignInHistoryReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSignInInfoRequest$Type extends MessageType<GetSignInInfoRequest> {
    constructor() {
        super("GetSignInInfoRequest", []);
    }
    create(value?: PartialMessage<GetSignInInfoRequest>): GetSignInInfoRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSignInInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSignInInfoRequest): GetSignInInfoRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetSignInInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetSignInInfoRequest
 */
export const GetSignInInfoRequest = new GetSignInInfoRequest$Type();
